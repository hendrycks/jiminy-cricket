"[RIDX: 2595]"

"*** GARDENS ***"

<OBJECT PAL-GATE
	(LOC ROOMS)
	(DESC "Palace Gate")
	(FLAGS LIGHTED LOCATION WINDY)
	(GLOBAL EWIND WWIND GPRAM GARDENS IFENCE PIGEONS NANNIES
	 	CHILDREN TOURISTS BABIES GTREES LONDON LCITY)
	(SEE-N BWALK)
	(SEE-S PGATE)
	(SEE-E FLWALK)
	(SEE-W IFENCE)
	(SEE-NE GTREES)
	(SEE-ALL IFENCE)
	(NORTH TO BROAD-WALK)
	(NE TO WABE)
	(EAST TO FLOWER-WALK)
	(SE PER IFENCE-BLOCKS)
	(SOUTH PER EXIT-GARDEN)
	(SW PER IFENCE-BLOCKS)
	(WEST PER IFENCE-BLOCKS)
	(NW PER IFENCE-BLOCKS)
	(OUT PER EXIT-GARDEN)
	(IN PER WHICH-WAY-IN)
	(ACTION PAL-GATE-F)>

<ROUTINE PAL-GATE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "A tide of " D ,GPRAM " surges ">
		<COND (<ZERO? ,RAID?>
		       <TELL "[RIDX: 2601]"
			     D ,BROAD-WALK ". Shad">)
		      (T
		       <TELL "[RIDX: 2603]" D ,D0>)>
		<TELL "[RIDX: 2604]" ,TON
"[RIDX: 2605]" D ,FLWALK ,PERIOD>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-EXIT>
		<COND (<NOT <IS? ,EWIND ,TOUCHED>>
		       <MAKE ,EWIND ,TOUCHED>
		       <TELL CTHE ,EWIND
"[RIDX: 2606]" ,PCR>)>
		<COND (<MISSED-MEEP?>
		       <CRLF>)>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE EXIT-GARDEN ()
	 <COND (<T? ,IN-PRAM?>
		<PERFORM ,V?EXIT ,PRAM>
		<RFALSE>)>
	 <TELL "A surge of ">
	 <SAY-TOURISTS>
	 <BLOCKS-YOUR-PATH>
	 <RFALSE>>

<ROUTINE SAY-TOURISTS ()
	 <COND (<T? ,RAID?>
		<COND (<PROB 50>
		       <TELL "frightened ">)
		      (T
		       <TELL "panic-stricken ">)>)>
	 <COND (<PROB 50>
		<COND (<ZERO? ,RAID?>
		       <TELL <PICK-NEXT <GET ,P-TYPES 0>>>)>
		<TELL D ,NANNIES>
		<RTRUE>)>
	 <COND (<ZERO? ,RAID?>
		<TELL <PICK-NEXT <GET ,P-TYPES 1>>>)>
	 <TELL D ,TOURISTS>
	 <RTRUE>>

<GLOBAL P-TYPES:TABLE
	<PTABLE
	 <LTABLE 2 "offended " "haughty " "starched ">
	 <LTABLE 2 "gawking " "babbling " "fat ">>>

<OBJECT FLOWER-WALK
	(LOC ROOMS)
	(DESC "Flower Walk")
	(FLAGS LIGHTED LOCATION WINDY)
	(ODOR BEDS)
	(SEE-N GTREES)
	(SEE-S MEMORIAL)
	(SEE-E TOURISTS)
	(SEE-W GTREES)
	(SEE-NW GTREES)
	(SEE-ALL BEDS)
	(GLOBAL EWIND WWIND GPRAM PIGEONS GARDENS LONDON LCITY
		NANNIES CHILDREN TOURISTS BABIES GTREES FLOWERS)
	(NORTH TO LAN-WALK)
	(NE SORRY "[RIDX: 2617]")
	(EAST PER EXIT-GARDEN)
	(SE SORRY "[RIDX: 2618]")
	(SOUTH SORRY
"[RIDX: 2619]")
	(SW SORRY "[RIDX: 2620]")
	(WEST TO PAL-GATE)
	(NW TO WABE)
	(OUT PER GARDEN-OUT)
	(ACTION FLOWER-WALK-F)>

<ROUTINE FLOWER-WALK-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Gaily colored " D ,BEDS
"[RIDX: 2623]" CR>
		<COND (<SEE-ANYTHING-IN? ,BEDS>
		       <CRLF>
		       <LOOK-IN-BEDS>)>
		<TELL CR "The spires of the " D ,MEMORIAL
		      " are all too visible" ,TOS ". ">
		<COND (<ZERO? ,RAID?>
		       <TELL "Passing " D ,TOURISTS
			     "[RIDX: 2628]"
			     D ,NANNIES
			     "[RIDX: 2629]" CR>
		       <RTRUE>)>
		<TELL "Frightened " D ,TOURISTS
		      "[RIDX: 2631]" D ,INTDIR ,PERIOD>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <MISSED-MEEP?>>
		<CRLF>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE GARDEN-OUT ()
	 <COND (<T? ,IN-PRAM?>
		<PERFORM ,V?EXIT ,PRAM>
		<RFALSE>)>
	 <WHICH-WAY-OUT>
	 <RFALSE>>

<OBJECT BROAD-WALK
	(LOC ROOMS)
	(DESC "Broad Walk")
	(FLAGS LIGHTED LOCATION WINDY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(SEE-N BWALK)
	(SEE-S BWALK)
	(SEE-E GRPOND)
	(SEE-W VICTORIA)
	(SEE-NW IFENCE)
	(SEE-SW IFENCE)
	(SEE-ALL GTREES)
	(GLOBAL GBAG WWIND EWIND GPRAM PIGEONS GARDENS LONDON LCITY
		NANNIES TOURISTS BABIES GTREES CHILDREN)
	(NORTH TO LION-GATE)
	(NE TO AT-TERRACE)
	(EAST TO ROUND-POND)
	(SE TO WABE)
	(SOUTH TO PAL-GATE)
	(SW PER IFENCE-BLOCKS)
	(WEST PER VICTORIA-BLOCKS)
	(NW PER IFENCE-BLOCKS)
	(OUT PER GARDEN-OUT)
	(ACTION BROAD-WALK-F)>

<ROUTINE BROAD-WALK-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A brooding " D ,VICTORIA "[RIDX: 2635]" D ,RPOND
"[RIDX: 2636]" D ,BROAD-WALK
"[RIDX: 2637]">
		<COND (<T? ,RAID?>
		       <TELL "fleeing ">)
		      (T
		       <TELL "bustle of ">)>
		<TELL D ,GPRAM
"[RIDX: 2640]">
		<TWEEN-TREES>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-EXIT>
		<COND (<MISSED-MEEP?>
		       <CRLF>)>
		<COND (<OR <IN? ,SCOIN ,BWOMAN>
			   <IN? ,BAG ,BWOMAN>>
		       <SETG LAYAWAY 1>)>
		<BWOMAN-CRY>
		<CRLF>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<SETG P-HER-OBJECT ,BWOMAN>
		<MAKE ,BWOMAN ,SEEN>
		<COND (<IS? ,BWOMAN ,NODESC>
		       <UNMAKE ,BWOMAN ,NODESC>
		       <TELL CR "A cloud of " D ,PIGEONS
"[RIDX: 2642]" CR>
		       <RTRUE>)>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<OBJECT ROUND-POND
	(LOC ROOMS)
	(DESC "Round Pond")
	(FLAGS LIGHTED LOCATION WINDY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(SEE-ALL GTREES)
	(GLOBAL EWIND WWIND GPRAM PIGEONS GARDENS LONDON LNWALK NANNIES
	 	CHILDREN TOURISTS BABIES GTREES LCITY)
	(NORTH TO AT-TERRACE)
	(NE TO LAN-GATE)
	(EAST TO LAN-WALK)
	(SE PER EXIT-GARDEN)
	(SOUTH TO WABE)
	(SW PER EXIT-GARDEN)
	(WEST TO BROAD-WALK)
	(NW TO LION-GATE)
	(OUT PER GARDEN-OUT)
	(IN SORRY "[RIDX: 2644]")
	(ACTION ROUND-POND-F)>

<ROUTINE ROUND-POND-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 2646]"
D ,CSURFACE " of the " D ,RPOND "[RIDX: 2648]">
		<COND (<T? ,RAID?>
		       <TELL " deserted">)
		      (T
		       <TELL "n impressive">)>
		<TELL " fleet of " D ,BOAT>
		<COND (<ZERO? ,RAID?>
		       <TELL
"[RIDX: 2652]" D ,CHILDREN>)>
		<COND (<FIRST? ,RPOND>
		       <TELL ". You also see ">
		       <PRINT-CONTENTS ,RPOND>
		       <TELL "[RIDX: 2654]">)>
		<TELL
"[RIDX: 2655]" D ,INTDIR "s." CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <MISSED-MEEP?>>
		<CRLF>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT WABE
	(LOC ROOMS)
	(DESC "The Wabe")
	(FLAGS LIGHTED LOCATION WINDY)
      ; (ODOR 0)
	(OVERHEAD GTREES)
      ; (HEAR 0)
	(NORTH PER WABE-N)
	(NE PER WABE-NE)
	(EAST PER THICKET-BLOCKS)
	(SE PER WABE-SE)
	(SOUTH PER THICKET-BLOCKS)
	(SW PER WABE-SW)
	(WEST PER THICKET-BLOCKS)
	(NW PER WABE-NW)
	(OUT PER WABE-OUT)
	(IN PER WHICH-WAY-IN)
	(ACTION WABE-F)
	(SEE-S THICKET)
	(SEE-E THICKET)
	(SEE-W THICKET)
	(SEE-ALL GTREES)
	(GLOBAL EWIND WWIND PIGEONS GARDENS LONDON LCITY
		ROSE SYMBOLS GTREES)>

<ROUTINE WABE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "This grassy " D ,CLEARING
"[RIDX: 2660]" D ,INTDIR "[RIDX: 2661]" D ,THICKET ,PERIOD>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <MISSED-MEEP?>>
		<CRLF>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE WABE-OUT ()
	 <COND (<T? ,IN-PRAM?>
		<PERFORM ,V?EXIT ,PRAM>
		<RFALSE>)>
	 <WHICH-WAY-OUT>
	 <RFALSE>>

<ROUTINE WABE-N ()
	 <COND (<IS? ,GNOMON ,BORING>
		<RETURN ,ROUND-POND>)>
	 <WOBBLE>
	 <RFALSE>>

<ROUTINE WABE-NE ()
	 <COND (<IS? ,GNOMON ,BORING>
		<RETURN ,LAN-WALK>)>
	 <WOBBLE>
	 <RFALSE>>

<ROUTINE WABE-SE ()
	 <COND (<IS? ,GNOMON ,BORING>
		<RETURN ,FLOWER-WALK>)>
	 <WOBBLE>
	 <RFALSE>>

<ROUTINE WABE-SW ()
	 <COND (<IS? ,GNOMON ,BORING>
		<RETURN ,PAL-GATE>)>
	 <WOBBLE>
	 <RFALSE>>

<ROUTINE WABE-NW ()
	 <COND (<IS? ,GNOMON ,BORING>
		<RETURN ,BROAD-WALK>)>
	 <WOBBLE>
	 <RFALSE>>

<ROUTINE WOBBLE ()
	 <MAKE ,GNOMON ,BORING>
	 <TELL "[RIDX: 2662]">
	 <SAY-WIND>
	 <TELL " puffs through the " D ,CLEARING ", and the "
	       D ,GNOMON " on the " D ,DIAL
	       "[RIDX: 2666]" CR>
	 <RTRUE>>

<OBJECT LION-GATE
	(LOC ROOMS)
	(DESC "Black Lion Gate")
	(FLAGS LIGHTED LOCATION WINDY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(SEE-N BLGATE)
	(SEE-S BWALK)
	(SEE-E GTREES)
	(SEE-SE GTREES)
	(SEE-ALL IFENCE)
	(GLOBAL EWIND WWIND GPRAM PIGEONS GARDENS IFENCE NANNIES
	 	TOURISTS BABIES GTREES CHILDREN LONDON LCITY)
	(NORTH PER EXIT-GARDEN)
	(NE PER IFENCE-BLOCKS)
	(EAST TO AT-TERRACE)
	(SE TO ROUND-POND)
	(SOUTH TO BROAD-WALK)
	(SW PER IFENCE-BLOCKS)
	(WEST PER IFENCE-BLOCKS)
	(NW PER IFENCE-BLOCKS)
	(IN PER WHICH-WAY-IN)
	(OUT PER EXIT-GARDEN)
	(ACTION LION-GATE-F)>

<ROUTINE LION-GATE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Nannies and " D ,TOURISTS " hurry through the "
		      D ,LGATE>
		<COND (<ZERO? ,RAID?>
		       <TELL
" to join the " D ,GPRAM "[RIDX: 2672]" D ,BWALK>)>
		<TELL "[RIDX: 2673]"
D ,IFENCE ", and southeast">
		<TWEEN-TREES>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <MISSED-MEEP?>>
		<CRLF>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT LAN-GATE
	(LOC ROOMS)
	(DESC "Lancaster Gate")
	(FLAGS LIGHTED LOCATION WINDY)
	(SEE-N LGATE)
	(SEE-S LNWALK)
	(SEE-E TOURISTS)
	(SEE-NE IFENCE)
	(SEE-NW IFENCE)
	(SEE-SW TOURISTS)
	(SEE-ALL GTREES)
	(GLOBAL EWIND WWIND GPRAM PIGEONS GARDENS IFENCE
	 	NANNIES CHILDREN TOURISTS BABIES GTREES
		LONDON LCITY)
      ; (ODOR 0)
      ; (HEAR 0)
	(OVERHEAD TREE)
	(NORTH PER EXIT-GARDEN)
	(NE PER IFENCE-BLOCKS)
	(EAST PER EXIT-GARDEN)
	(SE PER EXIT-GARDEN)
	(SOUTH PER S-LAN-GATE)
	(SW PER SW-LAN-GATE)
	(WEST PER W-LAN-GATE)
	(NW PER IFENCE-BLOCKS)
	(IN PER WHICH-WAY-IN)
	(UP PER NO-FOOTHOLDS)
	(OUT PER EXIT-GARDEN)
	(ACTION LAN-GATE-F)>

<ROUTINE NO-FOOTHOLDS ()
	 <TELL ,CANT "[RIDX: 2676]" CR>
	 <RFALSE>>

<ROUTINE LAN-GATE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 2678]" D ,GPRAM
		      " as they ">
		<COND (<ZERO? ,RAID?>
		       <TELL "roll south down the " D ,LNWALK>)
		      (T
		       <TELL "flee">)>
		<TELL "[RIDX: 2682]" D ,IFENCE
		      ", and southwest">
		<TWEEN-TREES>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <NOT <IS? ,JWOMAN ,SEEN>>>
		<MAKE ,JWOMAN ,SEEN>
		<UNMAKE ,JWOMAN ,NODESC>
		<QUEUE I-BLOW 2>
		<SETG P-HER-OBJECT ,JWOMAN>
		<SETG P-IT-OBJECT ,PARASOL>
		<TELL CR "There's an " D ,JWOMAN
"[RIDX: 2685]" D ,PARASOL ,PTHE "stiff ">
		<SAY-WIND>
		<TELL "[RIDX: 2687]" CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <MISSED-MEEP?>>
		<CRLF>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE TWEEN-TREES ("OPTIONAL" (CR T))
	 <TELL " between the " D ,GTREES>
	 <COND (<T? .CR>
		<PRINT ,PERIOD>)>
	 <RTRUE>>

<ROUTINE S-LAN-GATE ()
	 <COND (<SEE-JWOMAN?>
		<RFALSE>)>
	 <RETURN ,LAN-WALK>>

<ROUTINE W-LAN-GATE ()
	 <COND (<SEE-JWOMAN?>
		<RFALSE>)>
	 <RETURN ,AT-TERRACE>>

<ROUTINE SW-LAN-GATE ()
	 <COND (<SEE-JWOMAN?>
		<RFALSE>)>
	 <RETURN ,ROUND-POND>>

<ROUTINE SEE-JWOMAN? ()
	 <COND (<IS? ,JWOMAN ,CHILLY>
		<RFALSE>)>
	 <TELL "[RIDX: 2690]" D ,JWOMAN ", but ">
	 <COND (<NOT <IS? ,JWOMAN ,TOUCHED>>
		<TELL "stop in your tracks" ,PCR>
		<PERFORM ,V?EXAMINE ,JWOMAN>
		<RTRUE>)>
	 <TELL "pause for a moment." CR>
	 <RTRUE>>

<OBJECT LAN-WALK
	(LOC ROOMS)
	(DESC "Lancaster Walk")
	(FLAGS LIGHTED LOCATION WINDY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(HEAR GRASS)
	(NORTH TO LAN-GATE)
	(NE PER WALK-ON-GRASS)
	(EAST PER WALK-ON-GRASS)
	(SE PER WALK-ON-GRASS)
	(SOUTH TO FLOWER-WALK)
	(SW TO WABE)
	(WEST TO ROUND-POND)
	(NW TO AT-TERRACE)
	(OUT PER GARDEN-OUT)
	(ACTION LAN-WALK-F)
	(SEE-N LNWALK)
	(SEE-S LNWALK)
	(SEE-E LWATER)
	(SEE-ALL GTREES)
	(GLOBAL GRASS EWIND WWIND GPRAM PIGEONS GARDENS
		NANNIES CHILDREN TOURISTS BABIES GTREES)>

<ROUTINE LAN-WALK-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "An impressive " D ,ENERGY
"[RIDX: 2697]">
		<COND (<ZERO? ,RAID?>
		       <TELL "bustling ">)>
		<TELL
"[RIDX: 2699]" D ,INTDIR "[RIDX: 2700]" D ,GRASS
"[RIDX: 2701]" ,TOE "[RIDX: 2702]"
D ,LWATER " glittering">
		<TWEEN-TREES>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <MISSED-MEEP?>>
		<CRLF>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE WALK-ON-GRASS ()
	 <COND (<IS? ,NOTICE ,TOUCHED>
		<GRASS-STOPS-YOU "[RIDX: 2704]">
		<RFALSE>)>
	 <READ-NOTICE-FIRST>
	 <RFALSE>>

<ROUTINE READ-NOTICE-FIRST ()
	 <MAKE ,NOTICE ,TOUCHED>
	 <SETG P-IT-OBJECT ,NOTICE>
	 <TAKE-A-MOMENT-TO ,NOTICE>
	 <RTRUE>>

<OBJECT AT-TERRACE
	(LOC ROOMS)
	(DESC "Inverness Terrace")
	(FLAGS LIGHTED LOCATION WINDY NOALL VOWEL)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH PER IFENCE-BLOCKS)
	(NE PER IFENCE-BLOCKS)
	(NW PER IFENCE-BLOCKS)
	(OUT PER EXIT-GARDEN)
	(EAST TO LAN-GATE)
	(IN PER WHICH-WAY-IN)
	(SE TO LAN-WALK)
	(SOUTH TO ROUND-POND)
	(SW TO BROAD-WALK)
	(WEST TO LION-GATE)
	(ACTION AT-TERRACE-F)
	(SEE-N IFENCE)
	(SEE-NE IFENCE)
	(SEE-NW IFENCE)
	(SEE-ALL GTREES)
	(GLOBAL EWIND WWIND GPRAM PIGEONS GARDENS LONDON LCITY NANNIES
	      ; SBUBBLE CHILDREN TOURISTS BABIES GTREES IFENCE)>

"[RIDX: 2706]"

<ROUTINE AT-TERRACE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 2708]"
D ,IFENCE "[RIDX: 2709]" CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <MISSED-MEEP?>>
		<CRLF>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT LONG-WATER
	(LOC ROOMS)
	(DESC "Long Water")
	(FLAGS LIGHTED LOCATION)
      ; (ODOR 0)
	(OVERHEAD 0)
      ; (HEAR 0)
	(NORTH PER DONT-MISS-MISSILE)
	(NE PER DONT-MISS-MISSILE)
	(EAST PER SWIM-IN-LWATER)
	(SE PER DONT-MISS-MISSILE)
	(SOUTH PER DONT-MISS-MISSILE)
	(SW PER DONT-MISS-MISSILE)
	(WEST PER DONT-MISS-MISSILE)
	(NW PER DONT-MISS-MISSILE)
	(OUT PER WHICH-WAY-OUT)
	(IN PER SWIM-IN-LWATER)
	(ACTION LONG-WATER-F)
	(SEE-ALL GTREES)
	(SEE-E LWATER)
	(SEE-NE LWATER)
	(SEE-SE LWATER)
	(GLOBAL EWIND WWIND ; PIGEONS GARDENS LONDON LCITY BEACH OPSHORE
		MISSILE
	 	LWDOOR MALLARDS GTREES)>

<ROUTINE LONG-WATER-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 2712]"
D ,LWATER "[RIDX: 2713]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE SWIM-IN-LWATER ()
	 <TELL "You ">
	 <COND (<EQUAL? ,P-PRSA-WORD ,W?JUMP ,W?LEAP ,W?DIVE>
		<PRINTB ,P-PRSA-WORD>)
	       (T
		<TELL "wade">)>
	 <TELL "[RIDX: 2716]" ,PCR>
	 <RETURN ,IN-WATER>>

<ROUTINE DONT-MISS-MISSILE ()
	 <COND (<L? ,HCNT 6>
		<TELL "[RIDX: 2717]" D ,LWATER
		      " has you frozen ">)
	       (T
		<SETG HCNT 6>
		<TELL "[RIDX: 2719]">)>
	 <TELL "in your tracks." CR>
	 <I-LONDON-HOLE>
	 <RFALSE>>

<ROUTINE MISSED-MEEP? ()
	 <COND (<AND <VISIBLE? ,RUBY>
		     <NOT <IS? ,RUBY ,TOUCHED>>>
		<UNMAKE ,RUBY ,CHILLY>
		<I-RUBY <>>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT IN-WATER
	(LOC ROOMS)
	(DESC "Wading")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (ODOR 0)
	(OVERHEAD 0)
      ; (HEAR 0)
	(NORTH PER BEACH-TOO-FAR)
	(NE PER BEACH-TOO-FAR)
	(EAST PER ENTER-HOLE)
	(SE PER BEACH-TOO-FAR)
	(SOUTH PER BEACH-TOO-FAR)
	(SW PER BEACH-TOO-FAR)
	(WEST PER EXIT-WATER)
	(NW PER BEACH-TOO-FAR)
	(OUT PER EXIT-WATER)
	(DOWN SORRY "[RIDX: 2722]")
	(IN PER ENTER-HOLE)
	(SEE-ALL LWATER)
	(SEE-E LWATER)
	(SEE-W GTREES)
	(GLOBAL EWIND WWIND MISSILE LWDOOR GARDENS LONDON LCITY BEACH
	 	MALLARDS OPSHORE)
	(ACTION IN-WATER-F)>

<ROUTINE IN-WATER-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 2724]" D ,LWATER
		      "[RIDX: 2725]">
		<COND (<IS? ,LWDOOR ,TOUCHED>
		       <TELL
"[RIDX: 2726]" D ,LWDOOR
"[RIDX: 2727]" D ,CSURFACE>)>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE ENTER-HOLE ()
	 <COND (<IS? ,LWDOOR ,TOUCHED>
		<GO-INTO-LWDOOR>
		<RFALSE>)>
	 <BEACH-TOO-FAR>
	 <RFALSE>>

<ROUTINE BEACH-TOO-FAR ()
	 <TELL CTHE ,BEACH "[RIDX: 2728]" D ,INTDIR ,PERIOD>
	 <RFALSE>>

<ROUTINE EXIT-WATER ()
	 <TELL "[RIDX: 2729]" D ,BEACH ,PCR>
	 <RETURN ,LONG-WATER>>

"[RIDX: 2730]"

<OBJECT OSSUARY
	(LOC ROOMS)
	(DESC "Ossuary")
	(FLAGS LIGHTED LOCATION NOGRASS SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH PER HOLLOW-TOO-STEEP)
	(NE PER HOLLOW-TOO-STEEP)
	(EAST PER HOLLOW-TOO-STEEP)
	(SE PER HOLLOW-TOO-STEEP)
	(SOUTH PER OSSUARY-S)
	(SW PER HOLLOW-TOO-STEEP)
	(WEST PER HOLLOW-TOO-STEEP)
	(NW PER HOLLOW-TOO-STEEP)
	(IN PER OSSUARY-IN)
	(UP PER HOLLOW-TOO-STEEP)
	(ACTION OSSUARY-F)
	(SEE-S TUNNEL)
	(SEE-ALL HOLLOW)
	(GLOBAL BARROW TUNNEL TS2-DOOR DSTRUCT)>

<ROUTINE OSSUARY-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 2733]"
D ,HOLLOW "[RIDX: 2734]" D ,BONES
,PTHE "only exit is a dark " D ,HOPENING ,TOS ,PCR
"A giant " D ,TS2 "[RIDX: 2737]">
		<MENTION-DOOR ,TS2-DOOR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE MENTION-DOOR (X)
	 <COND (<NOT <IS? .X ,NOALL>>
		<TELL ,PTHE D .X " in its stem is ">
		<COND (<IS? .X ,OPENED>
		       <TELL "wide open">)
		      (T
		       <TELL "closed">)>)>
	 <PRINT ,PERIOD>
	 <RTRUE>>

<ROUTINE OSSUARY-S ()
	 <SETG WIGHTER 1>
       ; <TELL "You duck into the " D ,HOPENING ,PCR>
	 <RETURN ,IN-BARROW>>

<ROUTINE HOLLOW-TOO-STEEP ()
	 <TELL "[RIDX: 2742]">
	 <COND (<NOT <IS? ,HOLLOW ,TOUCHED>>
		<MAKE ,HOLLOW ,TOUCHED>
		<TELL "; the " D ,BONES
"[RIDX: 2744]">)>
	 <PRINT ,PERIOD>
	 <RFALSE>>

<ROUTINE OSSUARY-IN ()
	 <COND (<IS? ,TS2-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS2-DOOR ,OPENED>
		<COND (<BROLLY-OPEN?>
		       <RFALSE>)>
		<TELL "[RIDX: 2745]">
		<CARRIAGE-RETURNS>
		<SETG SECONDS 0>
		<SETG MINUTES 50>
		<SETG HOURS 17>
		<QUEUE I-TUNNEL -1>
		<RETURN ,TUN1>)
	       (T
		<ITS-CLOSED ,TS2-DOOR>
		<RFALSE>)>>

<OBJECT PROM
	(LOC ROOMS)
	(DESC "Promontory")
	(FLAGS LIGHTED LOCATION SHADOWY NOALL NOGRASS)
      ; (OVERHEAD 0)
	(HEAR GIANT)
	(ODOR GIANT)
	(NORTH PER YOUD-FALL)
	(NE PER YOUD-FALL)
	(EAST PER YOUD-FALL)
	(SE TO AT-CHASM)
	(SOUTH TO NBOG)
	(SW PER YOUD-FALL)
	(WEST PER YOUD-FALL)
	(NW PER YOUD-FALL)
	(SEE-ALL CHASM)
	(SEE-S PATH)
	(SEE-SE PATH)
	(OUT PER PROM-OUT)
	(IN PER PROM-IN)
	(ACTION PROM-F)
	(GLOBAL ; SBUBBLE DSTRUCT CHASM TREETOPS)>

<ROUTINE PROM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 2748]" D ,CHASM
"[RIDX: 2749]">
		<SAY-EAST>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE PROM-IN ()
	 <COND (<ZERO? ,IN-DISH?>
		<ENTER-DISH>
		<RFALSE>)>
	 <ALREADY-IN ,DISH>
	 <RFALSE>>

<ROUTINE PROM-OUT ()
	 <COND (<T? ,IN-DISH?>
		<EXIT-DISH>
		<RFALSE>)>
	 <WHICH-WAY-OUT>
	 <RFALSE>>

<OBJECT ON-MESA
	(LOC ROOMS)
	(DESC "Mesa")
	(FLAGS LIGHTED LOCATION NOGRASS SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH PER YOUD-FALL)
	(NE PER YOUD-FALL)
	(EAST PER YOUD-FALL)
	(SE PER YOUD-FALL)
	(SOUTH PER CROSS-CHASM)
	(SW PER YOUD-FALL)
	(WEST PER YOUD-FALL)
	(NW PER YOUD-FALL)
	(IN PER ON-MESA-IN)
	(OUT PER WHICH-WAY-OUT)
	(SEE-ALL CHASM)
	(SEE-S OAK)
	(ACTION ON-MESA-F)
	(GLOBAL OAK MESA CHASM STOOLS TS3-DOOR TREETOPS DSTRUCT)>

<ROUTINE ON-MESA-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,MESA "'s summit is a flat " D ,PLATFORM
"[RIDX: 2753]" D ,CHASM
,PA "[RIDX: 2754]" ,TOS ,PCR
"A giant " D ,TS3 "[RIDX: 2756]">
		<MENTION-DOOR ,TS3-DOOR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE CROSS-CHASM ()
	 <OAK-STEP>
	 <TELL ,PCR>
	 <RETURN ,AT-CHASM>>

<ROUTINE ON-MESA-IN ()
	 <COND (<IS? ,TS3-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS3-DOOR ,OPENED>
		<COND (<BROLLY-OPEN?>
		       <RFALSE>)>
		<SETG SECONDS 0>
		<SETG HOURS 4>
		<SETG MINUTES 52>
		<QUEUE I-FLIPPER -1>
		<QUEUE I-TIDE -1>
		<TELL "You ">
		<COND (<T? ,SUITED?>
		       <TELL "squeeze the " D ,FILM " through ">)
		      (T
		       <TELL "cross the brink of ">)>
		<TELL THE ,TS3-DOOR ".">
		<CARRIAGE-RETURNS>
		<RETURN ,ON-SCAFFOLD>)
	       (T
		<ITS-CLOSED ,TS3-DOOR>
		<RFALSE>)>>

<OBJECT ON-BLUFF
	(LOC ROOMS)
	(DESC "Bluff")
	(FLAGS LIGHTED LOCATION SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH PER YOUD-FALL)
	(NE PER YOUD-FALL)
	(EAST TO IN-COTTAGE IF COTTAGE-DOOR IS OPEN)
	(IN TO IN-COTTAGE IF COTTAGE-DOOR IS OPEN)
	(SE TO AT-CRATER)
	(SOUTH SORRY "[RIDX: 2763]")
	(SW TO AT-CHASM)
	(WEST PER YOUD-FALL)
	(NW PER YOUD-FALL)
	(ACTION ON-BLUFF-F)
	(SEE-ALL VALLEY)
	(SEE-E COTTAGE)
	(SEE-SE PATH)
	(SEE-S CLIFF)
	(SEE-SW PATH)
	(GLOBAL CLIFF STOOLS COTTAGE COTTAGE-DOOR DSTRUCT)>

<ROUTINE ON-BLUFF-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<LOOK-AT-VALLEY>
		<TELL "[RIDX: 2765]">
		<SAY-EAST>
		<TELL
" stands a little " D ,COTTAGE "[RIDX: 2767]" D ,COPSE
,PTHE D ,COTTAGE-DOOR " is ">
		<COND (<IS? ,COTTAGE-DOOR ,OPENED>
		       <TELL "open." CR>
		       <RTRUE>)>
		<TELL "closed." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE LOOK-AT-VALLEY ()
	 <TELL "[RIDX: 2771]" D ,STOOLS
"[RIDX: 2772]" D ,VALLEY " below.">
	 <RTRUE>>

<OBJECT IN-COTTAGE
	(LOC ROOMS)
	(DESC "Cottage")
	(FLAGS LIGHTED LOCATION	INDOORS SHADOWY)
	(ODOR CAULDRON)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(EAST TO IN-GARDEN IF GARDEN-DOOR IS OPEN)
	(WEST TO ON-BLUFF IF COTTAGE-DOOR IS OPEN)
	(OUT PER WHICH-WAY-OUT)
	(ACTION	IN-COTTAGE-F)
	(SEE-ALL WALLS)
	(SEE-E GARDEN-DOOR)
	(SEE-W COTTAGE-DOOR)
	(GLOBAL COTTAGE COTTAGE-DOOR GARDEN-DOOR GARDEN DSTRUCT)>

<ROUTINE IN-COTTAGE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "An iron " D ,CAULDRON>
		<COND (<IS? ,EMERALD ,NODESC>
		       <TELL
"[RIDX: 2777]">)
		      (T
		       <TELL "[RIDX: 2778]">)>
		<TELL "[RIDX: 2779]">
		<COND (<IS? ,EMERALD ,NODESC>
		       <TELL
"[RIDX: 2780]">)
		      (T
		       <TELL "The air is filled">)>
		<TELL
"[RIDX: 2782]">
		<COND (<IS? ,COTTAGE-DOOR ,OPENED>
		       <TELL "Luckily, the ">
		       <COND (<IS? ,GARDEN-DOOR ,OPENED>
			      <TELL
"front and " D ,GARDEN-DOOR "[RIDX: 2785]" CR>
			      <RTRUE>)>
		       <DOOR-LEADING ,COTTAGE-DOOR>
		       <RTRUE>)
		      (<IS? ,GARDEN-DOOR ,OPENED>
		       <TELL "Luckily, the ">
		       <DOOR-LEADING ,GARDEN-DOOR>
		       <RTRUE>)>
		<TELL
"[RIDX: 2787]" D ,GARDEN-DOOR "s are both closed." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE DOOR-LEADING (OBJ)
	 <TELL D .OBJ "[RIDX: 2789]">
	 <COND (<EQUAL? .OBJ ,COTTAGE-DOOR>
		<SAY-EAST>)
	       (T
		<SAY-WEST>)>
	 <TELL " is closed." CR>
	 <RTRUE>>

<OBJECT IN-GARDEN
	(LOC ROOMS)
	(DESC "Herb Garden")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR HERBS)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(WEST TO IN-COTTAGE IF GARDEN-DOOR IS OPEN)
	(IN PER IN-GARDEN-IN)
	(NORTH PER GFENCE-BLOCKS)
	(NE PER GFENCE-BLOCKS)
	(EAST PER GFENCE-BLOCKS)
	(SE PER GFENCE-BLOCKS)
	(SOUTH PER GFENCE-BLOCKS)
	(SW PER GFENCE-BLOCKS)
	(NW PER GFENCE-BLOCKS)
	(ACTION IN-GARDEN-F)
	(SEE-ALL GFENCE)
	(SEE-W GARDEN-DOOR)
	(GLOBAL GARDEN COTTAGE GARDEN-DOOR TS4-DOOR DSTRUCT)>

<ROUTINE IN-GARDEN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "A " D ,GFENCE
"[RIDX: 2794]">
		<OPEN-CLOSED ,GARDEN-DOOR>
		<TELL " of the " D ,COTTAGE "[RIDX: 2796]" D ,TS4 "[RIDX: 2797]" D ,PATCH>
		<MENTION-DOOR ,TS4-DOOR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE IN-GARDEN-IN ()
	 <COND (<IS? ,TS4-DOOR ,NOALL>
		<COND (<IS? ,GARDEN-DOOR ,OPENED>
		       <RETURN ,IN-COTTAGE>)
		      (T
		       <ITS-CLOSED ,GARDEN-DOOR>
		       <RFALSE>)>)
	       (<IS? ,TS4-DOOR ,OPENED>
		<COND (<BROLLY-OPEN?>
		       <RFALSE>)>
		<QUEUE I-RODENTS -1>
		<QUEUE I-RCOUNT -1>
		<SETG HOURS 14>
		<SETG MINUTES 41>
		<SETG SECONDS 0>
		<TELL CTHE ,TS4-DOOR
"[RIDX: 2798]">
		<CARRIAGE-RETURNS>
		<RETURN ,ON-PLATFORM>)>
	 <WHICH-WAY-IN>
	 <RFALSE>>

<OBJECT BONEYARD
	(LOC ROOMS)
	(DESC "Cemetery")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(DOWN PER DOWN-SSTEPS)
	(NORTH TO IN-BARROW IF BARROW-DOOR IS OPEN)
	(NE PER YOUD-FALL)
	(EAST PER YOUD-FALL)
	(SE PER YOUD-FALL)
	(SOUTH PER DOWN-SSTEPS)
	(IN TO IN-BARROW IF BARROW-DOOR IS OPEN)
	(SW PER YOUD-FALL)
	(WEST PER YOUD-FALL)
	(NW PER YOUD-FALL)
	(ACTION BONEYARD-F)
	(SEE-ALL CLIFF)
	(SEE-N BARROW)
	(SEE-S SSTEPS)
	(GLOBAL SSTEPS BARROW BARROW-DOOR TUNNEL CLIFF DSTRUCT)>

<ROUTINE BONEYARD-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Gloomy " D ,STATUES
"[RIDX: 2802]" D ,TOMBS ", their " D ,LIMBS
"[RIDX: 2804]" D ,CRYPT
" lies" ,AGROUND "[RIDX: 2806]" D ,BARROW>
		<COND (<IS? ,BARROW-DOOR ,OPENED>
		       <TELL ,PA "black " D ,TUNNEL
			     "[RIDX: 2808]" D ,BARROW>)
		      (T
		       <TELL "[RIDX: 2809]">)>
		<TELL "[RIDX: 2810]"
D ,SSTEPS " descends the cliff." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE UP-SSTEPS ()
	 <SCEND "a">
	 <RETURN ,BONEYARD>>

<ROUTINE DOWN-SSTEPS ()
	 <SCEND "de">
	 <RETURN ,AT-FALLS>>

<ROUTINE SCEND (STR)
	 <TELL "You carefully " .STR "scend the " D ,SSTEPS ,PCR>
	 <RTRUE>>

<OBJECT IN-BARROW
	(LOC ROOMS)
	(DESC "Barrow")
	(FLAGS LIGHTED LOCATION INDOORS SHADOWY)
      ; (ODOR WIGHT)
      ; (OVERHEAD 0)
      ; (HEAR WIGHT)
	(NORTH PER IN-BARROW-N)
	(SOUTH PER BARROW-EXIT)
	(OUT PER WHICH-WAY-OUT)
	(IN PER WHICH-WAY-IN)
	(DOWN PER DOWN-SLOPE)
	(GLOBAL BARROW TUNNEL BARROW-DOOR SLOPE DSTRUCT)
	(SEE-ALL WALLS)
	(SEE-N WIGHT)
	(SEE-S BARROW-DOOR)
	(ACTION IN-BARROW-F)>

<ROUTINE IN-BARROW-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The ">
		<COND (<AND <VISIBLE? ,LAMP>
			    <IS? ,LAMP ,LIGHTED>>
		       <TELL D ,LAMP "'s faltering beam">)
		      (<VISIBLE? ,SHARD>
		       <TELL D ,SHARD "'s ghostly flicker">)
		      (T
		       <TELL "[RIDX: 2821]">)>
		<TELL
"[RIDX: 2822]" ,TON " and south">
		<COND (<IS? ,SLOPE ,OPENED>
		       <TELL
"[RIDX: 2824]">)>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<COND (<IS? ,BARROW-DOOR ,OPENED>
		       <UNMAKE ,BARROW-DOOR ,OPENED>
		       <UNMAKE ,IN-BARROW ,LIGHTED>
		       <SETG P-IT-OBJECT ,BARROW-DOOR>
		       <UNMAKE ,WIGHT ,SEEN>
		       <SETG WIGHTER 4>
		       <QUEUE I-WIGHT -1>
		       <TELL CR
"[RIDX: 2825]"
D ,BARROW-DOOR "[RIDX: 2826]" CR>
		       <SAY-IF-HERE-LIT>)>
		<COND (<AND <T? ,LIT?>
			    <IS? ,WIGHT ,NODESC>>
		       <UNMAKE ,WIGHT ,NODESC>
	 	       <TELL CR "[RIDX: 2827]">
	 	       <COND (<AND <IS? ,LAMP ,LIGHTED>
		     		   <VISIBLE? ,LAMP>>
			      <TELL D ,LAMP>)
	       		     (T
			      <TELL D ,SHARD>)>
	 	       <TELL
"[RIDX: 2828]" D ,TUNNEL " wall">
		       <WIGHT-HAS>
		       <PRINT ,PERIOD>
		       <WIGHT-ID>)>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE WIGHT-ID ()
	 <COND (<IS? ,WIGHT ,BORING>
		<RFALSE>)>
	 <MAKE ,WIGHT ,BORING>
	 <CRLF>
	 <COND (<VISIBLE? ,MAGPIE>
		<TELL "[RIDX: 2830]" CR>
		<RTRUE>)>
	 <VOICE-MUTTERS "Barrow wight" <>>
	 <RTRUE>>

<ROUTINE IN-BARROW-N ()
	 <COND (<IN? ,SHARD ,PLAYER>
		<UNMAKE ,WIGHT ,SEEN>
		<COND (<IS? ,WIGHT ,CHILLY>
		       <WIGHT-STUMBLES>)
		      (T
		       <MAKE ,WIGHT ,CHILLY>
		       <WIGHT-COVERS>
		       <TELL "[RIDX: 2832]" ,PCR>)>
		<RETURN ,OSSUARY>)
	       (<AND <IN? ,LAMP ,PLAYER>
		     <IS? ,LAMP ,LIGHTED>>
		<UNMAKE ,WIGHT ,SEEN>
		<WIGHT-STUMBLES>
		<RETURN ,OSSUARY>)
	       (<AND <IN? ,LAMP ,HERE>
		     <IS? ,LAMP ,LIGHTED>>
		<WIGHT-BLOCKS-DESPITE ,LAMP>
		<RFALSE>)
	       (<IN? ,SHARD ,HERE>
		<WIGHT-BLOCKS-DESPITE ,SHARD>
		<RFALSE>)>
	 <TELL "[RIDX: 2833]" D ,TUNNEL ,PCR>
	 <WIGHT-KILLS-YOU>
	 <RFALSE>>

<ROUTINE WIGHT-BLOCKS-DESPITE (OBJ)
	 <MAKE ,WIGHT ,SEEN>
	 <TELL CTHE ,WIGHT
"[RIDX: 2834]" D ,DSHADOW " blocks the " D .OBJ
"[RIDX: 2836]"  D .OBJ
"[RIDX: 2837]" CR>
	 <RTRUE>>

<ROUTINE WIGHT-COVERS ()
	 <TELL CTHE ,WIGHT "[RIDX: 2838]">
	 <RTRUE>>

<ROUTINE WIGHT-STUMBLES ()
	 <TELL CTHE ,WIGHT>
	 <COND (<PROB 50>
		<TELL " stumble">)
	       (T
		<TELL " slink">)>
	 <TELL "s out of your way." CR>
	 <RTRUE>>

<ROUTINE BARROW-EXIT ()
	 <COND (<ZERO? ,LIT?>
		<TELL "Something hard">
		<BLOCKS-YOUR-PATH>
		<RFALSE>)>
	 <BLOCKS-YOUR-PATH ,BARROW-DOOR>
	 <RFALSE>>

<ROUTINE DOWN-SLOPE ()
	 <COND (<IS? ,SLOPE ,OPENED>
		<MAKE ,CAVE-HOLE ,SEEN>
		<UNMAKE ,IN-BARROW ,TOUCHED>
	 	<MAKE ,BARROW-DOOR ,OPENED>
		<MAKE ,IN-BARROW ,LIGHTED>
		<UNMAKE ,WIGHT ,SEEN>
		<QUEUE I-SLOPE 1>
		<TELL
"[RIDX: 2843]">
	 	<RETURN ,ICE-CAVE>)>
	 <TELL ,DONT "[RIDX: 2844]" CR>
	 <RFALSE>>

<OBJECT NBOG
	(LOC ROOMS)
	(DESC "North Bog")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR MIASMA)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH TO PROM)
	(NE SORRY "[RIDX: 2846]")
	(EAST TO AT-CHASM)
	(SE TO GBASE)
	(SOUTH TO SBOG)
	(SW TO AT-FALLS)
	(WEST PER CLIFF-BLOCKS)
	(NW PER CLIFF-BLOCKS)
	(ACTION NBOG-F)
	(SEE-ALL FOREST)
	(SEE-W CLIFF)
	(SEE-NW CLIFF)
	(GLOBAL FOREST ; SBUBBLE DSTRUCT BOG MIASMA CLIFF)>

<ROUTINE NBOG-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 2848]">
		<HEAR-DRIPPING>
		<TELL CR "[RIDX: 2849]" D ,INTDIR
"s. High " D ,RWALLS " curve away" ,TON " and south">
		<SAY-WEST>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT AT-CHASM
	(LOC ROOMS)
	(DESC "Chasm's Brink")
	(FLAGS LIGHTED LOCATION SHADOWY NOALL NOGRASS)
      ; (ODOR 0)
	(OVERHEAD OAK)
      ; (HEAR 0)
	(NORTH PER CROSS-TO-MESA)
	(DOWN PER CHASM-FALL)
	(NE TO ON-BLUFF)
	(EAST TO UNDER-CLIFF)
	(SE TO AT-BEND)
	(SOUTH SORRY "[RIDX: 2854]")
	(SW TO SBOG)
	(WEST TO NBOG)
	(NW TO PROM)
	(UP PER CLIMB-OAK)
	(ACTION AT-CHASM-F)
	(SEE-ALL FOREST)
	(SEE-N MESA)
	(GLOBAL OAK MESA FOREST CHASM TREETOPS DSTRUCT)>

<ROUTINE AT-CHASM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,CHASM
"[RIDX: 2856]" D ,MESA "[RIDX: 2857]" D ,CHASM "[RIDX: 2858]" CR>
		<COND (<IS? ,OAK ,NOALL>
		       <TELL CR
"[RIDX: 2859]" CR>
		       <RTRUE>)
		      (<IS? ,OAK ,TOUCHED>
		       <TELL CR "[RIDX: 2860]">
		       <COND (<IS? ,OAK ,WINDY>
			      <TELL D ,CHASM>)
			     (T
			      <TELL D ,GROUND>)>
		       <PRINT ,PERIOD>)>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE CROSS-TO-MESA ()
	 <COND (<IS? ,OAK ,WINDY>
		<OAK-STEP>
		<TELL ", and leap onto the " D ,MESA ,PCR>
		<RETURN ,ON-MESA>)>
	 <CHASM-FALL>
	 <RFALSE>>

<ROUTINE OAK-STEP ()
	 <TELL "[RIDX: 2862]">
	 <RTRUE>>

<ROUTINE CHASM-FALL ("AUX" (P <>) X)
	 <COND (<HERE? ON-BLUFF>
		<SET X ,VALLEY>)
	       (T
		<SET X ,CHASM>)>
	 <COND (<IS? ,HERE ,TRYTAKE>
		<COND (<AND <IN? ,PARASOL ,PLAYER>
			    <IS? ,PARASOL ,OPENED>>
		       <SET P T>)>
		<TELL "[RIDX: 2864]" D .X "'s brink">
		<COND (<OR <T? ,SUITED?> <T? .P>>
		       <TELL "[RIDX: 2866]">
		       <COND (<ZERO? ,SUITED?>
			      <TELL "open " D ,PARASOL
				    "[RIDX: 2868]">)
			     (T
			      <TELL D ,FILM ". But its flabby " D ,CSURFACE
				    " tears and pops">)>
		       <TELL " in the " D ,TREETOPS " below">
		       <COND (<AND <T? .P> <T? ,SUITED?>>
			      <TELL "; the " D ,PARASOL " tangles">)>
		       <TELL ", and you ">)
		      (T
		       <TELL ", and ">)>
		<TELL "[RIDX: 2877]">
		<PRINT-ID "places:1361"><JIGS-UP>
		<RFALSE>)>
	 <MAKE ,HERE ,TRYTAKE>
	 <TAKE-A-MOMENT-TO .X>
	 <RFALSE>>

<ROUTINE CLIMB-OAK ()
	 <COND (<IS? ,OAK ,NOALL>
		<PERFORM ,V?CLIMB-UP ,OAK>
		<RFALSE>)>
	 <CANT-GO>
	 <RFALSE>>

<OBJECT UNDER-CLIFF
	(LOC ROOMS)
	(DESC "Under Cliff")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(HEAR HIVE)
	(ODOR HIVE)
	(OVERHEAD CLIFF)
	(NORTH PER CLIFF-BLOCKS)
	(NE PER CLIFF-BLOCKS)
	(EAST TO AT-CRATER)
	(SE TO ON-MOOR)
	(SOUTH TO AT-BEND)
	(SW TO GBASE)
	(WEST TO AT-CHASM)
	(NW PER CLIFF-BLOCKS)
	(UP SORRY "[RIDX: 2880]")
	(ACTION UNDER-CLIFF-F)
	(SEE-ALL FOREST)
	(SEE-N CLIFF)
	(SEE-NE CLIFF)
	(SEE-NW CLIFF)
	(GLOBAL FOREST CLIFF DSTRUCT)>

<ROUTINE UNDER-CLIFF-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 2882]" D ,INTDIR "[RIDX: 2883]" D ,SCHOOL
"[RIDX: 2884]">
		<HEAR-HIVE>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE HEAR-HIVE ()
	 <TELL
"The faint buzzing " D ,SOUND
"[RIDX: 2886]" CR>>

<OBJECT AT-CRATER
	(LOC ROOMS)
	(DESC "Crater's Edge")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR SMOKE)
	(OVERHEAD SMOKE)
      ; (HEAR 0)
	(NORTH SORRY "[RIDX: 2888]")
	(NE SORRY "[RIDX: 2888]")
	(EAST PER ENTER-CRATER)
	(SE SORRY "[RIDX: 2888]")
	(SOUTH TO ON-MOOR)
	(SW TO AT-BEND)
	(WEST TO UNDER-CLIFF)
	(NW TO ON-BLUFF)
	(DOWN PER ENTER-CRATER)
	(IN PER ENTER-CRATER)
	(OUT PER WHICH-WAY-OUT)
	(ACTION AT-CRATER-F)
	(SEE-ALL FOREST)
	(SEE-E CRATER)
	(GLOBAL FOREST CRATER SMOKE RUBBLE DSTRUCT)>

<ROUTINE AT-CRATER-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<SETG P-IT-OBJECT ,CRATER>
		<TELL CTHE ,FOREST
"[RIDX: 2892]"
D ,RUBBLE ".|
|
The ">
		<SAY-EAST>
		<TELL "[RIDX: 2894]" D ,CRATER
"[RIDX: 2895]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE ENTER-CRATER ()
	 <TELL "[RIDX: 2896]" D ,CRATER ,PCR>
	 <RETURN ,IN-CRATER>>

<OBJECT IN-CRATER
	(LOC ROOMS)
	(DESC "Crater")
	(FLAGS LIGHTED LOCATION SHADOWY NOGRASS)
	(ODOR SMOKE)
	(OVERHEAD SMOKE)
      ; (HEAR 0)
	(NORTH PER IN-CRATER-UP)
	(NE PER IN-CRATER-UP)
	(EAST PER IN-CRATER-UP)
	(SE PER IN-CRATER-UP)
	(SOUTH PER IN-CRATER-UP)
	(SW PER IN-CRATER-UP)
	(NW PER IN-CRATER-UP)
	(WEST PER EXIT-CRATER)
	(UP PER EXIT-CRATER)
	(OUT PER EXIT-CRATER)
	(ACTION IN-CRATER-F)
	(SEE-ALL SMOKE)
	(GLOBAL CRATER SMOKE RUBBLE DSTRUCT)>

<ROUTINE IN-CRATER-UP ()
	 <TELL "[RIDX: 2898]">
	 <SAY-WEST>
	 <PRINT ,PERIOD>
	 <RFALSE>>

<ROUTINE IN-CRATER-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "A dark cloud of " D ,SMOKE
"[RIDX: 2901]" D ,RUBBLE
"[RIDX: 2902]" D ,CRATER ,PERIOD>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <NOT <IS? ,LUMP ,TOUCHED>>>
		<I-LUMP T>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE EXIT-CRATER ()
	 <TELL "[RIDX: 2903]" D ,CRATER ,PCR>
	 <RETURN ,AT-CRATER>>

<OBJECT AT-FALLS
	(LOC ROOMS)
	(DESC "Waterfall")
	(FLAGS LIGHTED LOCATION SHADOWY)
      ; (ODOR 0)
	(OVERHEAD CLIFF)
	(HEAR WATERFALL)
	(NORTH PER UP-SSTEPS)
	(UP PER UP-SSTEPS)
	(NE TO NBOG)
	(EAST TO SBOG)
	(SE TO FCLEARING)
	(SOUTH SORRY "[RIDX: 2905]")
	(SW SORRY "[RIDX: 2905]")
	(WEST PER AT-FALLS-W)
	(NW SORRY "[RIDX: 2905]")
	(IN PER AT-FALLS-IN)
	(ACTION AT-FALLS-F)
	(SEE-ALL CLIFF)
	(SEE-NE FOREST)
	(SEE-E FOREST)
	(SEE-SE FOREST)
	(SEE-N SSTEPS)
	(SEE-W WATERFALL)
	(GLOBAL STREAM SSTEPS CLIFF WATERFALL CAVE-HOLE TS1-DOOR DSTRUCT
	 	FOREST)>

<ROUTINE AT-FALLS-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 2909]">
		<SAY-WEST>
		<TELL
"[RIDX: 2910]"
D ,FOREST "[RIDX: 2911]">
		<SAY-EAST>
		<TELL ", past a giant " D ,TS1>
		<MENTION-DOOR ,TS1-DOOR>
		<TELL CR "A flight of " D ,SSTEPS
"[RIDX: 2914]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE AT-FALLS-W ()
	 <COND (<NOT <IS? ,CAVE-HOLE ,SEEN>>
		<BLOCKS-YOUR-PATH ,WATERFALL>
		<RFALSE>)>
	 <TELL "[RIDX: 2915]" ,PCR>
	 <RETURN ,ICE-CAVE>>

<ROUTINE AT-FALLS-IN ()
	 <COND (<IS? ,TS1-DOOR ,NOALL>
		<WHICH-WAY-IN>
		<RFALSE>)
	       (<IS? ,TS1-DOOR ,OPENED>
		<COND (<BROLLY-OPEN?>
		       <RFALSE>)>
		<SETG QUIET? T>
		<TELL "You ">
		<COND (<T? ,SUITED?>
		       <TELL "squeeze the " D ,FILM>)
		      (T
		       <TELL "slowly edge " D ,ME>)>
		<TELL " through " THE ,TS1-DOOR ".">
		<CARRIAGE-RETURNS>
	 	<QUEUE I-VACUUM -1>
	 	<QUEUE I-ORBIT -1>
	 	<GOTO ,IN-ORBIT>
	 	<I-ORBIT>
	 	<I-VACUUM>
		<RFALSE>)
	       (T
		<ITS-CLOSED ,TS1-DOOR>)>
	 <RFALSE>>

<ROUTINE BROLLY-OPEN? ()
	 <COND (<AND <IN? ,PARASOL ,PLAYER>
		     <IS? ,PARASOL ,OPENED>>
		<SETG P-IT-OBJECT ,PARASOL>
		<TELL "[RIDX: 2921]"
		      D ,PARASOL ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT ICE-CAVE
	(LOC ROOMS)
	(DESC "Ice Cavern")
	(FLAGS LIGHTED LOCATION INDOORS SHADOWY CHILLY)
      ; (ODOR 0)
	(HEAR WATERFALL)
	(OVERHEAD ICICLES)
	(EAST PER THROUGH-FALLS)
	(OUT PER THROUGH-FALLS)
	(UP PER SLOPE-GONE)
	(SEE-ALL WALLS)
	(SEE-E CAVE-HOLE)
	(GLOBAL WATERFALL CAVE-HOLE SLOPE DSTRUCT ICAVE)
	(ACTION ICE-CAVE-F)>

<ROUTINE ICE-CAVE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 2924]" D ,CAVE "[RIDX: 2925]" D ,BREATH
". Icicles on the " D ,CEILING
"[RIDX: 2927]" D ,CAVE-HOLE
" in the ">
		<SAY-EAST>
		<TELL
"[RIDX: 2929]"
D ,CAVE "[RIDX: 2930]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE THROUGH-FALLS ()
	 <TELL "[RIDX: 2931]" D ,WATERFALL ,PCR>
	 <RETURN ,AT-FALLS>>

<ROUTINE SLOPE-GONE ()
	 <COND (<IS? ,SLOPE ,SEEN>
		<GONE-NOW ,SLOPE>
		<RFALSE>)>
	 <TELL ,CANT "see any way up." CR>
	 <RFALSE>>

<OBJECT SBOG
	(LOC ROOMS)
	(DESC "South Bog")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR TRAP)
      ; (OVERHEAD 0)
	(HEAR STREAM)
	(NORTH TO NBOG)
	(NE TO AT-CHASM)
	(EAST TO GBASE)
	(SE TO AT-TRELS)
	(SOUTH TO FCLEARING)
	(SW PER UP-HILL)
	(UP PER UP-HILL)
	(WEST TO AT-FALLS)
	(NW SORRY "[RIDX: 2846]")
	(ACTION SBOG-F)
	(SEE-ALL FOREST)
	(GLOBAL BOG FOREST STREAM SUMMIT DSTRUCT MIASMA)>

<ROUTINE SBOG-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,GROUND
"[RIDX: 2936]" D ,STREAM
" that wanders ">
		<SAY-WEST>
		<TELL " and south">
		<SAY-EAST>
		<TELL "[RIDX: 2939]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT GBASE
	(LOC ROOMS)
	(DESC "Bottom of Stairs")
	(FLAGS LIGHTED LOCATION SHADOWY)
      ; (ODOR 0)
	(OVERHEAD STAIR)
      ; (HEAR 0)
	(NORTH PER WALK-UP-STAIRS)
	(NE TO UNDER-CLIFF)
	(EAST TO AT-BEND)
	(SE TO DOCKSIDE)
	(SOUTH TO AT-TRELS)
	(SW TO FCLEARING)
	(WEST TO SBOG)
	(NW TO NBOG)
	(UP PER WALK-UP-STAIRS)
	(DOWN SORRY "[RIDX: 2941]")
	(ACTION GBASE-F)
	(SEE-ALL FOREST)
	(SEE-N STAIR)
	(GLOBAL STRUCTURE STAIR FOREST DSHADOW VERTEX)>


<ROUTINE GBASE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The triangular " D ,STRUCTURE
"[RIDX: 2944]" ,RAZOR
"[RIDX: 2945]" D ,DSHADOW "[RIDX: 2946]" D ,STAIR
"[RIDX: 2947]" D ,INTDIR ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE WALK-UP-STAIRS ()
	<SETG STAIR-DIR " Up">
	<TELL "[RIDX: 2949]" D ,STAIR ,PCR>
	<RETURN ,HALFWAY>>

<OBJECT HALFWAY
	(LOC ROOMS)
	(DESC "Halfway")
	(FLAGS LIGHTED LOCATION SHADOWY NOGRASS)
      ; (ODOR 0)
	(OVERHEAD STAIR)
      ; (HEAR 0)
	(UP PER HALFWAY-UP)
	(NORTH PER HALFWAY-UP)
	(DOWN PER HALFWAY-DOWN)
	(SOUTH PER HALFWAY-DOWN)
	(NE PER YOUD-FALL)
	(EAST PER YOUD-FALL)
	(SE PER YOUD-FALL)
	(SW PER YOUD-FALL)
	(WEST PER YOUD-FALL)
	(NW PER YOUD-FALL)
	(IN PER WHICH-WAY-IN)
	(OUT PER WHICH-WAY-OUT)
	(GLOBAL STAIR STRUCTURE DSHADOW VERTEX)
	(SEE-N STAIR)
	(SEE-S STAIR)
	(SEE-ALL HORIZON)
	(ACTION HALFWAY-F)>

<ROUTINE HALFWAY-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 2952]">
		<COND (<EQUAL? ,STAIR-DIR " Up">
		       <TELL "cooler">)
		      (T
		       <TELL "warmer">)>
		<TELL "[RIDX: 2956]">
		<COND (<EQUAL? ,STAIR-DIR " Up">
		       <TELL D ,VERTEX>)
		      (T
		       <TELL D ,GROUND>)>
		<TELL ,PTHE "[RIDX: 2958]" D ,DSHADOW
			    " of the triangle." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<GLOBAL STAIR-DIR:STRING " Up">

<ROUTINE HALFWAY-UP ()
	 <COND (<MOVE-HALFWAY? T>
		<RETURN ,ON-GNOMON>)>
	 <RFALSE>>

<ROUTINE HALFWAY-DOWN ()
	 <COND (<MOVE-HALFWAY?>
		<RETURN ,GBASE>)>
	 <RFALSE>>

<ROUTINE MOVE-HALFWAY? ("OPTIONAL" (UP? <>))
	 <TELL "The air grows ">
	 <COND (<ZERO? .UP?>
		<TELL "warm">)
	       (T
		<TELL "cold">)>
	 <TELL "[RIDX: 2965]">
	 <COND (<ZERO? .UP?>
		<TELL "de">)
	       (T
		<TELL "a">)>
	 <TELL "scent" ,PCR>
	 <RTRUE>>

<OBJECT ON-GNOMON
	(LOC ROOMS)
	(DESC "Vertex")
	(FLAGS LIGHTED LOCATION SHADOWY NOGRASS CHILLY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH PER YOUD-FALL)
	(UP SORRY "[RIDX: 2970]")
	(NE PER YOUD-FALL)
	(EAST PER YOUD-FALL)
	(SE PER YOUD-FALL)
	(SOUTH PER WALK-DOWN-STAIRS)
	(SW PER YOUD-FALL)
	(WEST PER YOUD-FALL)
	(NW PER YOUD-FALL)
	(OUT PER WHICH-WAY-OUT)
	(IN PER WHICH-WAY-IN)
	(DOWN PER WALK-DOWN-STAIRS)
	(GLOBAL STAIR STRUCTURE ROSE SYMBOLS DSHADOW VERTEX)
	(SEE-S STAIR)
	(SEE-ALL HORIZON)
	(ACTION ON-GNOMON-F)>

<ROUTINE ON-GNOMON-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 2972]" D ,PLATFORM
"[RIDX: 2973]" D ,STAIR "[RIDX: 2974]" D ,DSHADOW " of the " D ,STRUCTURE
"[RIDX: 2976]" <GET ,SHDIRS 3> " " D ,HORIZON ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE WALK-DOWN-STAIRS ()
	 <SETG STAIR-DIR " Down">
	 <TELL "[RIDX: 2979]" D ,STAIR ,PCR>
	 <RETURN ,HALFWAY>>

<OBJECT ON-MOOR
	(LOC ROOMS)
	(DESC "Moor")
	(FLAGS LIGHTED LOCATION SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(HEAR CATS)
	(NORTH TO AT-CRATER)
	(NE SORRY "[RIDX: 2981]")
	(EAST SORRY "[RIDX: 2981]")
	(SE SORRY "[RIDX: 2983]")
	(SOUTH SORRY "[RIDX: 2983]")
	(SW SORRY "[RIDX: 2983]")
	(WEST TO AT-BEND)
	(NW TO UNDER-CLIFF)
	(IN PER ON-MOOR-IN)
	(ACTION ON-MOOR-F)
	(SEE-ALL FOREST)
	(SEE-NE CATS)
	(SEE-E CATS)
	(SEE-SE STYX)
	(SEE-S STYX)
	(SEE-SW STYX)
	(GLOBAL STYX BEACH OPSHORE FOG TS5-DOOR DSTRUCT)>

<ROUTINE ON-MOOR-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Tall, solemn " D ,CATS
"[RIDX: 2988]">
		<SAY-EAST>
		<TELL
"[RIDX: 2989]" D ,OPSHORE "[RIDX: 2990]" D ,TS0 "[RIDX: 2991]" D ,CATS>
		<COND (<NOT <IS? ,TS5-DOOR ,NOALL>>
		       <TELL ,PTHE "larger one has a">
		       <OPEN-CLOSED ,TS5-DOOR T>
		       <TELL " set into the stem">)>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE ON-MOOR-IN ()
	 <COND (<IS? ,TS5-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS5-DOOR ,OPENED>
		<COND (<BROLLY-OPEN?>
		       <RFALSE>)>
		<SETG HOURS 10>
		<SETG MINUTES 54>
		<SETG SECONDS 0>
		<TELL "You ">
		<COND (<T? ,SUITED?>
		       <TELL "squeeze the " D ,FILM " through ">)
		      (T
		       <TELL "[RIDX: 2997]">)>
		<TELL THE ,TS5-DOOR "...">
		<CARRIAGE-RETURNS>
		<TELL "[RIDX: 2999]" ,PCR>
		<RETURN ,IN-SKY>)
	       (T
		<ITS-CLOSED ,TS5-DOOR>
		<RFALSE>)>>

<OBJECT ON-HILL
	(LOC ROOMS)
	(DESC "Summit")
	(FLAGS LIGHTED LOCATION SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH SORRY "[RIDX: 3001]")
	(NE TO SBOG)
	(EAST TO FCLEARING)
	(SE SORRY "[RIDX: 3001]")
	(SOUTH TO IN-MEADOW)
	(SW SORRY "[RIDX: 3001]")
	(WEST SORRY "[RIDX: 3001]")
	(NW SORRY "[RIDX: 3001]")
	(DOWN PER WHICH-WAY-DOWN)
	(ACTION ON-HILL-F)
	(SEE-ALL FOREST)
	(SEE-E DSTRUCT)
	(GLOBAL STOOLS DSTRUCT SUMMIT FOREST DSHADOW)>

<ROUTINE ON-HILL-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,SUMMIT "[RIDX: 3007]">
		<SAY-WEST>
		<TELL "[RIDX: 3008]" D ,FOREST
"[RIDX: 3009]" D ,VALLEY
"[RIDX: 3010]" D ,DSTRUCT
"[RIDX: 3011]">
		<SAY-EAST>
		<TELL "ern " D ,TREETOPS
"[RIDX: 3013]" D ,DSHADOW "[RIDX: 3014]" D ,STOOLS
". ">
		<HUNDREDS-OF-THEM>
		<TELL
"[RIDX: 3016]"
D ,INTNUM "[RIDX: 3017]">
		<SAY-WEST>
		<TELL "ward, until the " D ,FOREST
		      "[RIDX: 3019]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE HUNDREDS-OF-THEM ()
	 <TELL "[RIDX: 3020]">
	 <RTRUE>>

<OBJECT FCLEARING
	(LOC ROOMS)
	(DESC "Forest Clearing")
	(FLAGS LIGHTED LOCATION SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(OVER-HEDGE SWPATH)
	(NORTH TO SBOG)
	(NE TO GBASE)
	(EAST TO AT-TRELS)
	(SE PER HEDGE-BLOCKS)
	(SOUTH PER HEDGE-BLOCKS)
	(SW PER HEDGE-BLOCKS)
	(WEST PER UP-HILL)
	(UP PER UP-HILL)
	(NW TO AT-FALLS)
	(ACTION FCLEARING-F)
	(SEE-ALL FOREST)
	(SEE-SE HEDGE)
	(SEE-S HEDGE)
	(SEE-SW HEDGE)
	(GLOBAL FOREST HEDGE ARBS SUMMIT DSTRUCT)>

<ROUTINE FCLEARING-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3023]" D ,HEDGE
"[RIDX: 3024]" D ,ARBS " stretch ">
		<SAY-EAST>
		<TELL "ward through the " D ,FOREST
		      "[RIDX: 3027]">
		<SAY-WEST>
		<TELL "[RIDX: 3028]">
		<TWEEN-TREES>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT AT-TRELS
	(LOC ROOMS)
	(DESC "Trellises")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR HEDGE)
      ; (OVERHEAD 0)
	(HEAR STREAM)
	(OVER-HEDGE ARBORETUM)
	(NORTH TO GBASE)
	(NE TO AT-BEND)
	(EAST TO DOCKSIDE)
	(SE TO SEPATH)
	(SOUTH PER HEDGE-BLOCKS)
	(SW TO SWPATH)
	(WEST TO FCLEARING)
	(NW TO SBOG)
	(IN PER WHICH-WAY-IN)
	(OUT PER WHICH-WAY-OUT)
	(ACTION AT-TRELS-F)
	(SEE-ALL FOREST)
	(SEE-SE LTREL)
	(SEE-SW RTREL)
	(SEE-S HEDGE)
	(GLOBAL FOREST HEDGE ARBS STREAM DSTRUCT)>

<ROUTINE AT-TRELS-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3031]" D ,ARBS "[RIDX: 3032]"
D ,FOREST ,PTHE "[RIDX: 3033]"
D ,TRELS ,PCR "A mountain " D ,STREAM " trickles">
		<TWEEN-TREES <>>
		<TELL
"[RIDX: 3036]" D ,INTDIR "s." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT DOCKSIDE
	(LOC ROOMS)
	(DESC "The River")
	(FLAGS LIGHTED LOCATION SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(OVER-HEDGE SEPATH)
	(NORTH TO AT-BEND)
	(NE SORRY "[RIDX: 2983]")
	(EAST SORRY "[RIDX: 2983]")
	(SE SORRY "[RIDX: 2983]")
	(SOUTH PER HEDGE-BLOCKS)
	(SW PER HEDGE-BLOCKS)
	(WEST TO AT-TRELS)
	(NW TO GBASE)
	(IN PER DORY-IN)
	(OUT PER DOCKSIDE-OUT)
	(ACTION DOCKSIDE-F)
	(SEE-N BEACH)
	(SEE-S HEDGE)
	(SEE-SW HEDGE)
	(SEE-W FOREST)
	(SEE-NW FOREST)
	(SEE-ALL STYX)
	(GLOBAL HEDGE ARBS STYX FOG DSTRUCT BEACH OPSHORE FOREST)>

<ROUTINE DOCKSIDE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<DESCRIBE-DOCKSIDE>
		<TELL CR
"[RIDX: 3043]"
D ,HEDGE "[RIDX: 3044]" D ,STYX "'s edge." CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <NOT <IS? ,DORY ,NODESC>>>
		<MAKE ,DORY ,NODESC>
		<QUEUE I-STYX -1>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<ROUTINE DESCRIBE-DOCKSIDE ()
	 <TELL "You're ">
	 <COND (<T? ,IN-DORY?>
		<TELL "in a dory">)
	       (T
		<TELL "[RIDX: 3048]">)>
	 <TELL " beside a great " D ,STYX
,PTHE "[RIDX: 3050]"
D ,CSURFACE "[RIDX: 3051]" CR>
	 <RTRUE>>

<ROUTINE DOCKSIDE-OUT ()
	 <COND (<T? ,IN-DORY?>
		<PERFORM ,V?EXIT ,DORY>
		<RFALSE>)>
	 <WHICH-WAY-OUT>
	 <RFALSE>>

<OBJECT AT-BEND
	(LOC ROOMS)
	(DESC "The Bend")
	(FLAGS LIGHTED LOCATION SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(HEAR STREAM)
	(NORTH TO UNDER-CLIFF)
	(NE TO AT-CRATER)
	(EAST TO ON-MOOR)
	(SE SORRY "[RIDX: 2983]")
	(SOUTH TO DOCKSIDE)
	(SW TO AT-TRELS)
	(WEST TO GBASE)
	(NW TO AT-CHASM)
	(ACTION AT-BEND-F)
	(SEE-ALL FOREST)
	(SEE-S BEACH)
	(SEE-SE STYX)
	(GLOBAL STYX FOG STREAM DSTRUCT BEACH OPSHORE)>

<ROUTINE AT-BEND-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "An exhausted " D ,STREAM
"[RIDX: 3056]" ,TOS " and ">
		<SAY-EAST>
		<TELL ,PTHE D ,OPSHORE "[RIDX: 3058]" D ,INTDIR "[RIDX: 3059]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT IN-MEADOW
	(LOC ROOMS)
	(DESC "Meadow")
	(FLAGS LIGHTED LOCATION ; SHADOWY)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(UP PER UP-HILL)
	(NORTH PER UP-HILL)
	(NE PER MEADOW-EXIT)
	(EAST PER MEADOW-EXIT)
	(SE PER MEADOW-EXIT)
	(SOUTH PER MEADOW-EXIT)
	(SW PER MEADOW-EXIT)
	(WEST PER MEADOW-EXIT)
	(NW PER MEADOW-EXIT)
	(IN PER DOOR-NOT-HERE)
	(ACTION IN-MEADOW-F)
	(SEE-ALL FOREST)
	(SEE-N SUMMIT)
	(GLOBAL TS0-DOOR DSTRUCT SUMMIT FOREST DFLIES)>

<ROUTINE IN-MEADOW-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3062]" D ,MEADOW
"[RIDX: 3063]" D ,FOREST
,PTHE "air is filled with " D ,DFLIES
"[RIDX: 3065]" ,PCR>
		<COND (<IS? ,IN-MEADOW ,SHADOWY>
		       <TELL "A giant " D ,TS0 " is growing nearby." CR>
		       <RTRUE>)>
		<TELL
"[RIDX: 3068]" D ,TS0
"[RIDX: 3069]"
D ,PARASOL ,PERIOD>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<MAKE ,IN-MEADOW ,SHADOWY>
		<RFALSE>)
	       (<EQUAL? .CONTEXT ,M-EXIT>
		<UNMAKE ,IN-MEADOW ,SEEN>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<ROUTINE MEADOW-EXIT ()
	 <TELL "The dense " D ,FOREST "[RIDX: 3071]">
	 <COND (<IS? ,IN-MEADOW ,SEEN>
		<PRINT ,PERIOD>
		<RFALSE>)>
	 <MAKE ,IN-MEADOW ,SEEN>
	 <TELL
"[RIDX: 3072]" CR>
	 <RFALSE>>

<ROUTINE UP-HILL ()
	 <TELL "[RIDX: 3073]" D ,SUMMIT ,PCR>
	 <RETURN ,ON-HILL>>

<OBJECT SWPATH
	(LOC ROOMS)
	(DESC "Arborvitaes")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR HEDGE)
	(OVERHEAD HEDGE)
      ; (HEAR 0)
	(OVER-HEDGE FCLEARING)
	(NORTH PER HEDGE-BLOCKS)
	(NE TO AT-TRELS)
	(EAST TO ARBORETUM)
	(SE PER HEDGE-BLOCKS)
	(SOUTH PER HEDGE-BLOCKS)
	(SW PER HEDGE-BLOCKS)
	(WEST PER HEDGE-BLOCKS)
	(NW PER HEDGE-BLOCKS)
	(ACTION SWPATH-F)
	(SEE-ALL HEDGE)
	(SEE-NE PATH)
	(SEE-E PATH)
	(GLOBAL HEDGE ARBS DSTRUCT)>

<ROUTINE SWPATH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<SAY-HEDGE-PATH>
		<SAY-EAST>
		<TELL " and north">
		<SAY-EAST>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT SEPATH
	(LOC ROOMS)
	(DESC "Arborvitaes")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR HEDGE)
	(OVERHEAD HEDGE)
      ; (HEAR 0)
	(OVER-ARBOR DOCKSIDE)
	(NORTH PER HEDGE-BLOCKS)
	(NE PER HEDGE-BLOCKS)
	(EAST PER HEDGE-BLOCKS)
	(SE PER HEDGE-BLOCKS)
	(SOUTH PER HEDGE-BLOCKS)
	(SW PER HEDGE-BLOCKS)
	(WEST TO ARBORETUM)
	(NW TO AT-TRELS)
	(ACTION SEPATH-F)
	(SEE-ALL HEDGE)
	(SEE-NW PATH)
	(SEE-W PATH)
	(GLOBAL HEDGE ARBS DSTRUCT)>

<ROUTINE SEPATH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<SAY-HEDGE-PATH>
		<SAY-WEST>
		<TELL " and north">
		<SAY-WEST>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE SAY-HEDGE-PATH ()
	 <TELL
"[RIDX: 3080]"
D ,TOWER "[RIDX: 3081]">
	 <RTRUE>>

<OBJECT ARBORETUM
	(LOC ROOMS)
	(DESC "Arboretum")
	(FLAGS LIGHTED LOCATION SHADOWY)
	(ODOR HEDGE)
	(OVERHEAD ARBOR)
      ; (HEAR 0)
	(OVER-HEDGE AT-TRELS)
	(UP PER WHICH-WAY-UP-NS)
	(IN PER WHICH-WAY-IN-NS)
	(OUT PER WHICH-WAY-OUT)
	(NORTH PER ENTER-ARBOR-N)
	(NE PER HEDGE-BLOCKS)
	(EAST TO SEPATH)
	(SE PER HEDGE-BLOCKS)
	(SOUTH PER ENTER-ARBOR-S)
	(SW PER HEDGE-BLOCKS)
	(WEST TO SWPATH)
	(NW PER HEDGE-BLOCKS)
	(ACTION ARBORETUM-F)
	(SEE-N ARBOR)
	(SEE-S ARBOR)
	(SEE-E PATH)
	(SEE-W PATH)
	(SEE-ALL HEDGE)
	(GLOBAL ARBOR HEDGE ARBS DSTRUCT)>

<ROUTINE WHICH-WAY-UP-NS ()
	 <WHICH-WAY "up, north or south">
	 <RFALSE>>

<ROUTINE WHICH-WAY-IN-NS ()
	 <WHICH-WAY "in, north or south">
	 <RFALSE>>

<ROUTINE ARBORETUM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "A spectacular " D ,ARBOR " of " D ,ARBS
"[RIDX: 3088]"
D ,CSURFACE
"[RIDX: 3089]">
		<DESCRIBE-PERGOLA>
		<TELL
"[RIDX: 3090]" D ,HEDGE ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE DESCRIBE-PERGOLA ()
	 <TELL "Steep, leafy " D ,TUNNEL "s curve up into the " D ,ARBOR
	       ,TON " and south. ">
	 <RTRUE>>

<ROUTINE ENTER-ARBOR-N ()
	 <ENTER-ARBOR ,P?NORTH>
	 <RETURN ,NORTH-ARBOR>>

<ROUTINE ENTER-ARBOR-S ()
	 <ENTER-ARBOR ,P?SOUTH>
	 <RETURN ,SOUTH-ARBOR>>

<GLOBAL ENTERED-ARBOR:DIRECTION <>>

<ROUTINE ENTER-ARBOR (DIR)
	 <SETG ENTERED-ARBOR .DIR>
	 <TELL "You ascend the ">
	 <COND (<EQUAL? .DIR ,P?SOUTH>
		<TELL "sou">)
	       (T
		<TELL "nor">)>
	 <TELL "th side of the " D ,ARBOR ,PCR>
	 <RTRUE>>

<OBJECT NORTH-ARBOR
	(LOC ROOMS)
	(DESC "North Arbor")
	(FLAGS LIGHTED LOCATION INDOORS SHADOWY)
      ; (HEAR 0)
	(ODOR HEDGE)
	(OVERHEAD ARBOR)
	(NORTH SORRY "[RIDX: 3099]")
	(NE PER SOMETHING-BUSHY)
	(EAST PER SOMETHING-BUSHY)
	(SE PER SOMETHING-BUSHY)
	(SOUTH SORRY "[RIDX: 3099]")
	(SW PER SOMETHING-BUSHY)
	(WEST PER SOMETHING-BUSHY)
	(NW PER SOMETHING-BUSHY)
	(UP PER TO-ARBOR-TOP)
	(DOWN PER EXIT-ARBOR-N)
	(OUT PER EXIT-ARBOR-N)
	(IN PER TO-ARBOR-TOP)
	(ACTION ARBORSIDE-F)
	(SEE-ALL ARBS)
	(GLOBAL ARBOR HEDGE ARBS)>

<ROUTINE TO-ARBOR-TOP ()
	 <FLOOR-TWISTS>
	 <TELL "continue your ascent" ,PCR>
	 <RETURN ,ARBOR-TOP>>

<ROUTINE FLOOR-TWISTS ()
	 <TELL CTHE ,FLOOR "[RIDX: 3102]">
	 <RTRUE>>

<OBJECT SOUTH-ARBOR
	(LOC ROOMS)
	(DESC "South Arbor")
	(FLAGS LIGHTED LOCATION INDOORS SHADOWY)
      ; (HEAR 0)
	(ODOR HEDGE)
	(OVERHEAD ARBOR)
	(NORTH SORRY "[RIDX: 3099]")
	(NE PER SOMETHING-BUSHY)
	(EAST PER SOMETHING-BUSHY)
	(SE PER SOMETHING-BUSHY)
	(SOUTH SORRY "[RIDX: 3099]")
	(SW PER SOMETHING-BUSHY)
	(WEST PER SOMETHING-BUSHY)
	(NW PER SOMETHING-BUSHY)
	(UP PER TO-ARBOR-TOP)
	(DOWN PER EXIT-ARBOR-S)
	(OUT PER EXIT-ARBOR-S)
	(IN PER TO-ARBOR-TOP)
	(ACTION ARBORSIDE-F)
	(SEE-ALL ARBS)
	(GLOBAL ARBOR HEDGE ARBS)>

<ROUTINE ARBORSIDE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The \"" D ,FLOOR "\" of the " D ,ARBOR
"[RIDX: 3109]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE EXIT-ARBOR-N ()
	 <EXIT-ARBOR ,P?NORTH>
	 <RETURN ,ARBORETUM>>

<ROUTINE EXIT-ARBOR-S ()
	 <EXIT-ARBOR ,P?SOUTH>
	 <RETURN ,ARBORETUM>>

<ROUTINE EXIT-ARBOR (DIR "AUX" (CNT 0) OBJ X)
	 <COND (<NOT <EQUAL? ,ENTERED-ARBOR .DIR>>
	      	<COND (<ZERO? ,FLIP?>
		       <SETG FLIP? T>)
		      (T
		       <SETG FLIP? <>>)>
		<RESET-SHDIRS>
		<REPEAT ()
			<SET OBJ <GET ,FLIPPERS .CNT>>
			<COND (<ZERO? .OBJ>
			       <RETURN>)>
			<SET X <GOT? .OBJ>>
			<COND (<ZERO? .X>
			       <COND (<AND <EQUAL? .OBJ ,WTK>
					   <NOT <IS? .OBJ ,TOUCHED>>>
				      T)
				     (<IS? .OBJ ,FLIPPED>
				      <UNMAKE .OBJ ,FLIPPED>)
				     (T
				      <MAKE .OBJ ,FLIPPED>)>)>
			<INC CNT>>)>
	 <FLOOR-TWISTS>
	 <TELL "descend" ,PCR>
	 <RTRUE>>

<GLOBAL FLIPPERS:TABLE
	<PTABLE GNOMON CREDIT-CARD OCRANE BAD-CRANE PARASOL WTK
		SCOIN BCOIN 0>>

<OBJECT ARBOR-TOP
	(LOC ROOMS)
	(DESC "Top of Arbor")
	(FLAGS LOCATION INDOORS SHADOWY)
      ; (HEAR 0)
	(ODOR HEDGE)
	(OVERHEAD 0)
	(NORTH TO NORTH-ARBOR)
	(SOUTH TO SOUTH-ARBOR)
	(DOWN PER WHICH-WAY-DOWN)
	(OUT PER WHICH-WAY-OUT)
	(IN PER WHICH-WAY-IN)
	(NE PER SOMETHING-BUSHY)
	(EAST PER SOMETHING-BUSHY)
	(SE PER SOMETHING-BUSHY)
	(SW PER SOMETHING-BUSHY)
	(WEST PER SOMETHING-BUSHY)
	(NW PER SOMETHING-BUSHY)
	(ACTION ARBOR-TOP-F)
	(SEE-ALL ARBS)
	(GLOBAL ARBOR HEDGE ARBS)>

<ROUTINE ARBOR-TOP-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3114]">
		<COND (<AND <VISIBLE? ,LAMP>
			    <IS? ,LAMP ,LIGHTED>>
		       <TELL "[RIDX: 3115]" D ,LAMP>)
		      (T
		       <TELL "[RIDX: 3116]" D ,SHARD>)>
		<TELL ". ">
		<SMELL-HEDGE>
		<TELL CR "Dark, leafy " D ,TUNNEL
"s curve down" ,TON " and south." CR>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<TELL CR
"Your sense of " D ,INTDIR " is very confused." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE SOMETHING-BUSHY ()
	 <COND (<ZERO? ,LIT?>
		<TELL "[RIDX: 3123]">)
	       (T
		<TELL "Arborvitaes block">)>
	 <TELL " your path." CR>
	 <RFALSE>>

<OBJECT ON-BEACH
	(LOC ROOMS)
	(DESC "Sand Bar")
	(FLAGS LIGHTED LOCATION SHADOWY NOGRASS)
      ; (HEAR 0)
      ; (ODOR 0)
	(OVERHEAD FOG)
	(NORTH SORRY "[RIDX: 2983]")
	(NE SORRY "[RIDX: 2983]")
	(EAST SORRY "[RIDX: 2983]")
	(SE SORRY "[RIDX: 2983]")
	(SOUTH TO ON-ISLE)
	(SW SORRY "[RIDX: 2983]")
	(WEST SORRY "[RIDX: 2983]")
	(NW SORRY "[RIDX: 2983]")
	(IN PER DORY-IN)
	(ACTION ON-BEACH-F)
	(SEE-ALL STYX)
	(SEE-S BEACH)
	(GLOBAL STYX FOG ; DSTRUCT BEACH OPSHORE)>

<ROUTINE ON-BEACH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3135]" ,TOS ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT ON-ISLE
	(LOC ROOMS)
	(DESC "Islet")
	(FLAGS LIGHTED LOCATION SHADOWY NOGRASS)
      ; (HEAR 0)
      ; (ODOR 0)
	(OVERHEAD FOG)
	(NORTH TO ON-BEACH)
	(NE SORRY "[RIDX: 2983]")
	(EAST SORRY "[RIDX: 2983]")
	(SE SORRY "[RIDX: 2983]")
	(SOUTH SORRY "[RIDX: 2983]")
	(SW SORRY "[RIDX: 2983]")
	(WEST SORRY "[RIDX: 2983]")
	(NW SORRY "[RIDX: 2983]")
	(IN PER ON-ISLE-IN)
	(ACTION ON-ISLE-F)
	(SEE-ALL STYX)
	(SEE-N PATH)
	(GLOBAL STYX FOG TS6-DOOR DSTRUCT BEACH OPSHORE)>

<ROUTINE ON-ISLE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3145]" D ,TS6 "[RIDX: 3146]">
		<MENTION-DOOR ,TS6-DOOR>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<COND (<NOT <IS? ,ON-ISLE ,SEEN>>
		       <MAKE ,ON-ISLE ,SEEN>
		       <CRLF>
		       <VOICE-MUTTERS "Gnomon is an island" <>>)>
		<COND (<IN? ,MEEP ,TS6>
		       <MAKE ,MEEP ,SEEN>
		       <SETG P-IT-OBJECT ,MEEP>
		       <TELL CR "A " D ,MEEP
			    " is perched on the " D ,TS6 "'s crown">
		       <ENTICINGLY>
		       <TELL ,PERIOD>)>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE ENTICINGLY ()
	 <TELL ,PTHE "[RIDX: 3151]">
	 <RTRUE>>

<ROUTINE ON-ISLE-IN ()
	 <COND (<IS? ,TS6-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS6-DOOR ,OPENED>
		<COND (<BROLLY-OPEN?>
		       <RFALSE>)>
		<TELL "[RIDX: 3152]">
		<CARRIAGE-RETURNS>
		<GO-TO-SHACK>
		<RETURN ,IN-SHACK>)
	       (T
		<ITS-CLOSED ,TS6-DOOR>
		<RFALSE>)>>

<GLOBAL TR?:FLAG <>>

<ROUTINE GO-TO-SHACK ("AUX" (CNT 0))
	 <SETG TR? T>
	 <SETG FLIP? <>>
	 <REPEAT ()
		 <PUT ,WIRE-TYPES .CNT <PICK-ONE ,WIRE-COLORS>>
		 <COND (<IGRTR? CNT 3>
			<RETURN>)>>
	 <MAKE ,METEOR ,NOALL>
	 <DEQUEUE I-WTK>
	 <DEQUEUE I-SHADOW>
	 <SETG MINUTES 58>
	 <SETG SECONDS 30>
	 <SETG HOURS 4>
	 <QUEUE I-VOICES -1>
	 <MOVE ,GROVES ,GLOBAL-OBJECTS>
	 <RTRUE>>

"[RIDX: 3154]"

<GLOBAL WIRE-TYPES:TABLE <TABLE 0 0 0 0>>
<GLOBAL WIRE-COLORS:TABLE <LTABLE 0 "POS" "GND" "INF" "DET">>
<GLOBAL XWIRE:OBJECT <>> "[RIDX: 3159]"

"[RIDX: 3160]"

<ROUTINE PICK-ONE (TBL "AUX" L CNT RND MSG RTBL)
	 <SET L <GET .TBL 0>>
	 <SET CNT <GET .TBL 1>>
	 <DEC L>
	 <SET TBL <REST .TBL 2>>
	 <SET RTBL <REST .TBL <* .CNT 2>>>
	 <SET RND <RANDOM <- .L .CNT>>>
	 <SET MSG <GET .RTBL .RND>>
	 <PUT .RTBL .RND <GET .RTBL 1>>
	 <PUT .RTBL 1 .MSG>
	 <INC CNT>
	 <COND (<EQUAL? .CNT .L>
		<SET CNT 0>)>
	 <PUT .TBL 0 .CNT>
	 <RETURN .MSG>>

"*** SPACE ***"

<OBJECT IN-ORBIT
	(LOC ROOMS)
	(DESC "Earth Orbit")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (HEAR 0)
	(OVERHEAD STARS)
      ; (ODOR 0)
	(NORTH PER NO-PROPULSION)
	(NE PER NO-PROPULSION)
	(EAST PER NO-PROPULSION)
	(SE PER NO-PROPULSION)
	(SOUTH PER NO-PROPULSION)
	(SW PER NO-PROPULSION)
	(WEST PER NO-PROPULSION)
	(NW PER NO-PROPULSION)
	(IN PER WHICH-WAY-IN)
	(OUT PER WHICH-WAY-OUT)
	(UP PER NO-PROPULSION)
	(DOWN PER NO-PROPULSION)
	(ACTION IN-ORBIT-F)
	(SEE-ALL STARS)
	(GLOBAL XRAY STARS MOON ICBM THRUSTERS TS1-DOOR PLANET)>

<ROUTINE IN-ORBIT-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3165]" D ,HORIZON
"[RIDX: 3166]" CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-BEG>
		     <ZERO? ,SUITED?>
		     <OR <VERB? LISTEN SMELL>
			 <INTBL? ,PRSA ,TALKVERBS ,NTVERBS>>>
		<DONT-PROPAGATE>
		<RTRUE>)
	     ; (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <NOT <IS? ,IN-ORBIT ,SEEN>>>
		<MAKE ,IN-ORBIT ,SEEN>
		<SETG DO-WINDOW <GET ,QUOTES, RONNIE>>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<ROUTINE DONT-PROPAGATE ()
	 <COND (<VERB? SMELL>
		<TELL "Odor">)
	       (T
		<TELL "Sound">)>
	 <TELL "[RIDX: 3169]" CR>
	 <RTRUE>>

<ROUTINE NO-PROPULSION ()
	 <TELL "[RIDX: 3170]" CR>
	 <RFALSE>>

<OBJECT ON-SAT
	(LOC ROOMS)
	(DESC "[RIDX: 3171]")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (HEAR 0)
      ; (ODOR 0)
	(OVERHEAD STARS)
	(NORTH PER NO-PROPULSION)
	(NE PER NO-PROPULSION)
	(EAST PER NO-PROPULSION)
	(SE PER NO-PROPULSION)
	(SOUTH PER NO-PROPULSION)
	(SW PER NO-PROPULSION)
	(WEST PER NO-PROPULSION)
	(NW PER NO-PROPULSION)
	(IN PER WHICH-WAY-IN)
	(OUT PER WHICH-WAY-OUT)
	(UP PER NO-PROPULSION)
	(DOWN PER NO-PROPULSION)
	(ACTION ON-SAT-F)
	(SEE-ALL STARS)
	(GLOBAL XRAY STARS MOON ICBM THRUSTERS TS1-DOOR PLANET)>

<ROUTINE ON-SAT-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<LOOK-AT-XRAY>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE LOOK-AT-XRAY ()
	 <TELL CTHE ,XRAY>
	 <COND (<HERE? ON-SAT>
		<TELL " you're riding">)
	       (T
		<TELL " drifting ">
		<COND (<EQUAL? ,ORBCNT 3>
		       <TELL "closer to ">)
		      (<G? ,ORBCNT 5>
		       <TELL "away from ">)
		      (T
		       <TELL "past ">)>
		<TELL "you">)>
	 <TELL "[RIDX: 3179]">
	 <COND (<HERE? ON-SAT>
		<TELL ,PTHE D ,FILM
"[RIDX: 3180]" D ,XRAY "'s hull by the " D ,LUMP>)>
	 <PRINT ,PERIOD>
	 <RTRUE>>

"*** TUNDRA ***"

<OBJECT ON-PLATFORM
	(LOC ROOMS)
	(DESC "Platform")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(DOWN PER DOWN-PLADDER)
	(NORTH PER PLAT-FALL)
	(NE PER PLAT-FALL)
	(EAST PER PLAT-FALL)
	(SE PER PLAT-FALL)
	(SOUTH PER ON-PLATFORM-IN)
	(SW PER PLAT-FALL)
	(WEST PER PLAT-FALL)
	(NW PER PLAT-FALL)
	(IN PER ON-PLATFORM-IN)
	(ACTION ON-PLATFORM-F)
	(SEE-ALL TMOUNTS)
	(GLOBAL TUNDRA PLATFORM PLADDER TMOUNTS TS4-DOOR RSPEAKER)>

<ROUTINE ON-PLATFORM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"This narrow " D ,PLATFORM
" is attached" ,TON "[RIDX: 3187]" D ,TBOMB
"[RIDX: 3188]"
D ,HORIZON " lined with gray " D ,TMOUNTS ,PCR>
		<COND (<IS? ,TS4-DOOR ,NOALL>
		       <TELL "A " D ,PLADDER " leads downward." CR>
		       <RTRUE>)>
		<TELL "A">
		<OPEN-CLOSED ,TS4-DOOR T>
		<TELL
" leads into the " D ,TBOMB
"[RIDX: 3194]" D ,PLADDER " stand beside it." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE PLAT-FALL ()
	 <YOUD-FALL-OFF ,PLATFORM>
	 <RFALSE>>

<ROUTINE ON-PLATFORM-IN ()
	 <COND (<IS? ,TS4-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS4-DOOR ,OPENED>
		<DEQUEUE I-RCOUNT>
		<DEQUEUE I-RODENTS>
		<COND (<G? ,MINUTES 49>
		       <TELL "Numb with cold, you ">)
		      (T
		       <TELL "You ">)>
		<TELL "[RIDX: 3198]" D ,TS4-DOOR ,PERIOD>
		<EXIT-HOLE ,TS4-DOOR ,IN-GARDEN>
		<RFALSE>)>
	 <ITS-CLOSED ,TS4-DOOR>
	 <RFALSE>>

<ROUTINE EXIT-HOLE (DOOR TO)
	 <SETG HERE .TO>
	 <MOVE ,PLAYER .TO>
	 <SETG ODEG 6>
	 <MAKE .DOOR ,NOALL>
	 <UNMAKE .DOOR ,OPENED>
	 <CARRIAGE-RETURNS>
	 <V-LOOK>
	 <SETG P-IT-OBJECT ,NOT-HERE-OBJECT>
	 <TELL CR CTHE .DOOR
"[RIDX: 3199]" D ,TS0 ,PERIOD>
	 <RTRUE>>

<ROUTINE DOWN-PLADDER ()
	 <TELL "You descend the " D ,PLADDER ,PCR>
	 <RETURN ,UNDER-PLAT>>

<OBJECT UNDER-PLAT
	(LOC ROOMS)
	(DESC "Under Platform")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
	(OVERHEAD PLATFORM)
	(NORTH TO BTUN)
	(NE TO CTUN)
	(EAST TO ETUN)
	(SE TO HTUN)
	(SOUTH TO GTUN)
	(SW TO FTUN)
	(WEST TO DTUN)
	(NW TO ATUN)
	(UP PER UP-PLADDER)
	(GLOBAL PLATFORM TUNDRA PLADDER LEMMINGS RODENTS TCABLES RSPEAKER)
	(SEE-ALL TUNDRA)
	(ACTION UNDER-PLAT-F)>

<ROUTINE UNDER-PLAT-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A network of " D ,TCABLES "[RIDX: 3204]" D ,TBOMB
"[RIDX: 3205]" D ,TUNDRA
"[RIDX: 3206]" D ,PLADDER " leads up to a " D ,PLATFORM " overhead." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE UP-PLADDER ()
	 <TELL "You ascend the " D ,PLADDER ,PCR>
	 <RETURN ,ON-PLATFORM>>

<OBJECT ATUN
	(LOC ROOMS)
	(DESC "Tundra")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(NORTH SORRY "[RIDX: 3211]")
	(NE SORRY "[RIDX: 3211]")
	(EAST TO BTUN)
	(SE TO UNDER-PLAT)
	(SOUTH TO DTUN)
	(SW PER DESOLATION)
	(WEST PER DESOLATION)
	(NW SORRY "[RIDX: 3211]")
	(UP SORRY "[RIDX: 3214]")
	(ACTION ATUN-F)
	(SEE-ALL TUNDRA)
	(SEE-N TMOUNTS)
	(SEE-NE TMOUNTS)
	(SEE-NW TMOUNTS)
	(SEE-SE PLATFORM)
	(GLOBAL PLATFORM TUNDRA TMOUNTS LEMMINGS RODENTS)
	(PLAT-DIR P?SE)>

<ROUTINE ATUN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3216]"
D ,TMOUNTS ". " ,YOU-SEE THE ,TBOMB " on the southeast "
D ,HORIZON ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE DESOLATION ()
	 <TELL "[RIDX: 3219]" D ,RIGHT ,PERIOD>
	 <RFALSE>>

<OBJECT BTUN
	(LOC ROOMS)
	(DESC "Tundra")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(NORTH SORRY "[RIDX: 3211]")
	(NE SORRY "[RIDX: 3211]")
	(EAST TO CTUN)
	(SE TO ETUN)
	(SOUTH TO UNDER-PLAT)
	(SW TO DTUN)
	(WEST TO ATUN)
	(NW SORRY "[RIDX: 3211]")
	(UP SORRY "[RIDX: 3214]")
	(ACTION BTUN-F)
	(SEE-ALL TUNDRA)
	(SEE-N TMOUNTS)
	(SEE-NE TMOUNTS)
	(SEE-NW TMOUNTS)
	(SEE-S PLATFORM)
	(GLOBAL TUNDRA PLATFORM TMOUNTS LEMMINGS RODENTS)
	(PLAT-DIR P?SOUTH)>

<ROUTINE BTUN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,TMOUNTS
"[RIDX: 3226]" D ,TBOMB
" is visible far" ,TOS ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT CTUN
	(LOC ROOMS)
	(DESC "Tundra")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(NORTH SORRY "[RIDX: 3211]")
	(NE PER TO-CLIFF)
	(EAST SORRY "[RIDX: 3211]")
	(SE SORRY "[RIDX: 3211]")
	(SOUTH TO ETUN)
	(SW TO UNDER-PLAT)
	(WEST TO BTUN)
	(NW SORRY "[RIDX: 3211]")
	(UP SORRY "[RIDX: 3214]")
	(ACTION CTUN-F)
	(GLOBAL TUNDRA PLATFORM PASS TMOUNTS LEMMINGS RODENTS)
	(SEE-ALL TMOUNTS)
	(SEE-NE PASS)
	(SEE-S TUNDRA)
	(SEE-SW PLATFORM)
	(SEE-W TUNDRA)
	(PLAT-DIR P?SW)>

<ROUTINE CTUN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A prehistoric " D ,PASS "[RIDX: 3236]" D ,TMOUNTS
"[RIDX: 3237]" D ,TBOMB
"[RIDX: 3238]" D ,HORIZON ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE TO-CLIFF ()
	 <TELL "[RIDX: 3239]" D ,RATS ,PCR>
	 <RETURN ,CLIFF-EDGE>>

<OBJECT DTUN
	(LOC ROOMS)
	(DESC "Tundra")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(NORTH TO ATUN)
	(NE TO BTUN)
	(EAST TO UNDER-PLAT)
	(SE TO GTUN)
	(SOUTH TO FTUN)
	(SW PER DESOLATION)
	(WEST PER DESOLATION)
	(NW PER DESOLATION)
	(UP SORRY "[RIDX: 3214]")
	(ACTION DTUN-F)
	(GLOBAL TUNDRA PLATFORM TMOUNTS LEMMINGS RODENTS)
	(SEE-ALL TUNDRA)
	(SEE-E PLATFORM)
	(PLAT-DIR P?EAST)>

<ROUTINE DTUN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3243]"
D ,TBOMB "[RIDX: 3244]" D ,TMOUNTS ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT ETUN
	(LOC ROOMS)
	(DESC "Tundra")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(NORTH TO CTUN)
	(NE SORRY "[RIDX: 3211]")
	(EAST SORRY "[RIDX: 3211]")
	(SE SORRY "[RIDX: 3211]")
	(SOUTH TO HTUN)
	(SW TO GTUN)
	(WEST TO UNDER-PLAT)
	(NW TO BTUN)
	(UP SORRY "[RIDX: 3214]")
	(ACTION ETUN-F)
	(GLOBAL TUNDRA PLATFORM TMOUNTS LEMMINGS RODENTS)
	(SEE-ALL TUNDRA)
	(SEE-NE TMOUNTS)
	(SEE-E TMOUNTS)
	(SEE-SE TMOUNTS)
	(SEE-W PLATFORM)
	(PLAT-DIR P?WEST)>

<ROUTINE ETUN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3251]" D ,TBOMB
" and beyond. Gray " D ,TMOUNTS "[RIDX: 3253]" ,TOE ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT FTUN
	(LOC ROOMS)
	(DESC "Tundra")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(NORTH TO DTUN)
	(NE TO UNDER-PLAT)
	(EAST TO GTUN)
	(SE PER DESOLATION)
	(SOUTH PER DESOLATION)
	(SW PER MEET-RUSKIES)
	(WEST PER DESOLATION)
	(NW PER DESOLATION)
	(ACTION FTUN-F)
	(GLOBAL TUNDRA PLATFORM TMOUNTS LEMMINGS RODENTS TCABLES)
	(SEE-ALL TUNDRA)
	(SEE-NE PLATFORM)
	(SEE-SW GROUP)
	(PLAT-DIR P?NE)>

<ROUTINE FTUN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The tall " D ,TBOMB
"[RIDX: 3257]" D ,HORIZON ". Thick "
D ,TCABLES "[RIDX: 3259]"
D ,GROUP ,PERIOD>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<SETG P-THEM-OBJECT ,GROUP>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<OBJECT GTUN
	(LOC ROOMS)
	(DESC "Tundra")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(NORTH TO UNDER-PLAT)
	(NE TO ETUN)
	(EAST TO HTUN)
	(SE PER DESOLATION)
	(SOUTH PER DESOLATION)
	(SW PER DESOLATION)
	(WEST TO FTUN)
	(NW TO DTUN)
	(ACTION GTUN-F)
	(GLOBAL TUNDRA PLATFORM TMOUNTS LEMMINGS RODENTS)
	(SEE-ALL TUNDRA)
	(SEE-N PLATFORM)
	(PLAT-DIR P?NORTH)>

<ROUTINE GTUN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Only the " D ,TBOMB " on the northern " D ,HORIZON
"[RIDX: 3264]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT HTUN
	(LOC ROOMS)
	(DESC "Tundra")
	(FLAGS LIGHTED LOCATION CHILLY)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(NORTH TO ETUN)
	(NE SORRY "[RIDX: 3211]")
	(EAST SORRY "[RIDX: 3211]")
	(SE SORRY "[RIDX: 3211]")
	(SOUTH PER DESOLATION)
	(SW PER DESOLATION)
	(WEST TO GTUN)
	(NW TO UNDER-PLAT)
	(UP SORRY "[RIDX: 3214]")
	(ACTION HTUN-F)
	(GLOBAL TUNDRA PLATFORM TMOUNTS LEMMINGS RODENTS)
	(SEE-ALL TUNDRA)
	(SEE-NW PLATFORM)
	(SEE-NE TMOUNTS)
	(SEE-E TMOUNTS)
	(SEE-SE TMOUNTS)
	(PLAT-DIR P?NW)>

<ROUTINE HTUN-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Steep " D ,TMOUNTS
" tower" ,TOW "[RIDX: 3273]"
D ,TBOMB "[RIDX: 3274]" D ,HORIZON ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT CLIFF-EDGE
	(LOC ROOMS)
	(DESC "Cliff Edge")
	(FLAGS LIGHTED LOCATION CHILLY)
	(NORTH PER OVER-CLIFF)
	(NE PER OVER-CLIFF)
	(EAST PER OVER-CLIFF)
	(SE PER OVER-CLIFF)
	(SOUTH SORRY "[RIDX: 3211]")
	(SW PER TO-TUNDRA)
	(WEST SORRY "[RIDX: 3211]")
	(NW SORRY "[RIDX: 3211]")
	(UP SORRY "[RIDX: 3214]")
	(ACTION CLIFF-EDGE-F)
	(SEE-ALL TCLIFF)
	(SEE-SW PASS)
	(SEE-NW TMOUNTS)
	(SEE-W TMOUNTS)
	(SEE-S TMOUNTS)
	(GLOBAL TUNDRA TMOUNTS PASS LEMMINGS)>

<ROUTINE CLIFF-EDGE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,PASS
"[RIDX: 3281]"
D ,RATS
"[RIDX: 3282]">
		<COND (<EQUAL? ,RATS ,RODENTS>
		       <TELL "[RIDX: 3283]">)>
		<TELL ".|
|
The " D GROUND "[RIDX: 3285]" D ,FISSURE
"[RIDX: 3286]" D ,LEMMINGS ,PERIOD>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <EQUAL? ,RATS ,RODENTS>>
		<SWITCH-LEMMINGS>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<ROUTINE OVER-CLIFF ()
	 <SAY-SURE>
	 <TELL "go over that cliff?">
	 <COND (<YES?>
		<CRLF>
		<VOICE-MUTTERS "[RIDX: 3288]">
		<TELL "You tumble ">
	 	<CLIFF-DROWN>
	 	<RFALSE>)>
	 <CRLF>
	 <VOICE-MUTTERS "Whew" <>>
	 <RFALSE>>

<ROUTINE CLIFF-DROWN ()
	 <TELL
"[RIDX: 3291]">
	 <PRINT-ID "places:3147"><JIGS-UP>
	 <RTRUE>>

<ROUTINE TO-TUNDRA ()
	 <TELL "[RIDX: 3293]" D ,RATS ,PCR>
	 <RETURN ,CTUN>>

"*** UNDERGROUND ***"

<OBJECT TUN1
	(LOC ROOMS)
	(DESC "Underground")
	(FLAGS LOCATION INDOORS)
      ; (HEAR 0)
      ; (ODOR 0)
	(OVERHEAD RWALLS)
	(NORTH SORRY "[RIDX: 3296]")
	(NE SORRY "[RIDX: 3296]")
	(EAST PER EXIT-CAVE)
	(SE SORRY "[RIDX: 3296]")
	(SOUTH SORRY "[RIDX: 3296]")
	(SW SORRY "[RIDX: 3296]")
	(WEST TO TUN2)
	(NW SORRY "[RIDX: 3296]")
	(IN PER TUN1-IN)
	(OUT PER EXIT-CAVE)
	(ACTION TUN1-F)
	(SEE-ALL RWALLS)
	(SEE-E TS2-DOOR)
	(SEE-W CAVERN)
	(GLOBAL CAVERN RWALLS UCABLES TS2-DOOR)>

<ROUTINE TUN1-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3303]">
		<COND (<AND <NOT <IS? ,TS2-DOOR ,NOALL>>
			    <IS? ,TS2-DOOR ,OPENED>>
		       <TELL "[RIDX: 3304]">)
		      (<AND <VISIBLE? ,LAMP>
			    <IS? ,LAMP ,LIGHTED>>
		       <TELL THE ,LAMP "'s beam">)
		      (T
		       <TELL THE ,SHARD "'s fitful glow">)>
		<TELL ". ">
		<LOOK-AT-RWALLS>
		<TELL CR "A large " D ,UBOMB
"[RIDX: 3309]" D ,UCABLES
"[RIDX: 3310]"
		      D ,CAVERN ,PERIOD>
		<COND (<AND <NOT <IS? ,TS2-DOOR ,NOALL>>
			    <NOT <IS? ,TS2-DOOR ,OPENED>>>
		       <TELL CR CTHE ,TS2-DOOR
			     "[RIDX: 3311]" CR>)>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE TUN1-IN ()
	 <COND (<IS? ,TS2-DOOR ,OPENED>
		<EXIT-CAVE>
		<RFALSE>)>
	 <RETURN ,TUN2>>

<ROUTINE LOOK-AT-RWALLS ()
	 <TELL "The walls and " D ,CEILING
"[RIDX: 3313]" CR>
	 <RTRUE>>

<ROUTINE EXIT-CAVE ()
	 <COND (<IS? ,TS2-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS2-DOOR ,OPENED>
		<TELL "[RIDX: 3314]" D ,TS2-DOOR ,PCR>
		<DEQUEUE I-TUNNEL>
		<COND (<GOT? ,WTK>
		       <UNMAKE ,WTK ,SEEN>
		       <QUEUE I-WTK -1>)>
		<EXIT-HOLE ,TS2-DOOR ,OSSUARY>
		<RFALSE>)>
	 <ITS-CLOSED ,TS2-DOOR>
	 <RFALSE>>

<OBJECT TUN2
	(LOC ROOMS)
	(DESC "Underground")
	(FLAGS LOCATION INDOORS)
      ; (HEAR 0)
      ; (ODOR 0)
	(OVERHEAD RWALLS)
	(NORTH SORRY "[RIDX: 3296]")
	(NE SORRY "[RIDX: 3296]")
	(EAST TO TUN1)
	(SE SORRY "[RIDX: 3296]")
	(SOUTH SORRY "[RIDX: 3296]")
	(SW SORRY "[RIDX: 3296]")
	(WEST TO TUN3)
	(NW SORRY "[RIDX: 3296]")
	(IN PER WHICH-WAY-IN)
	(OUT PER WHICH-WAY-OUT)
	(ACTION TUN2-F)
	(SEE-E CAVERN)
	(SEE-W CAVERN)
	(SEE-ALL RWALLS)
	(GLOBAL CAVERN RWALLS UCABLES)>

<ROUTINE TUN2-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,UCABLES " lining the " D ,CAVERN
"[RIDX: 3324]">
		<COND (<AND <VISIBLE? ,LAMP>
			    <IS? ,LAMP ,LIGHTED>>
		       <COND (<IN? ,LAMP ,PLAYER>
			      <TELL "dancing ">)>
		       <TELL "beam of the " D ,LAMP>)
		      (T
		       <TELL D ,SHARD "'s flickering glow">)>
		<TELL ". Deep " D ,CAVERN
		      "s bend off" ,TOE " and west." CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <T? ,LIT?>
		     <IS? ,SKINK ,NODESC>>
		<MOVE ,SKINK ,TUN2>
		<UNMAKE ,SKINK ,NODESC>
	 	<QUEUE I-SKINK -1>
		<MAKE ,SKINK ,SEEN>
		<TELL CR "As you study the " D ,MIKE
"[RIDX: 3332]" D ,SKINK ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT TUN3
	(LOC ROOMS)
	(DESC "Underground")
	(FLAGS LOCATION INDOORS)
      ; (HEAR 0)
      ; (ODOR 0)
	(OVERHEAD RWALLS)
	(NORTH SORRY "[RIDX: 3296]")
	(NE SORRY "[RIDX: 3296]")
	(EAST TO TUN2)
	(SE SORRY "[RIDX: 3296]")
	(SOUTH SORRY "[RIDX: 3296]")
	(SW SORRY "[RIDX: 3296]")
	(WEST PER LANDSLIDE-BLOCKS)
	(NW SORRY "[RIDX: 3296]")
	(OUT TO TUN2)
	(IN PER LANDSLIDE-BLOCKS)
	(ACTION TUN3-F)
	(SEE-E CAVERN)
	(SEE-W LANDSLIDE)
	(SEE-ALL RWALLS)
	(GLOBAL CAVERN RWALLS UCABLES)>

<ROUTINE TUN3-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The west end of the " D ,CAVERN
"[RIDX: 3342]" D ,LANDSLIDE "[RIDX: 3343]"
D ,UCABLES " emerge from the " D ,RUBBLE "[RIDX: 3345]">
		<SAY-EAST>
		<TELL ,PCR>
		<COND (<IN? ,SHARD ,CREVICE>
		       <TELL "[RIDX: 3346]">)
		      (<AND <VISIBLE? ,LAMP>
			    <IS? ,LAMP ,LIGHTED>>
		       <TELL CTHE ,LAMP "'s beam reveals a ">)
		      (T
		       <TELL CTHE ,SHARD "[RIDX: 3348]">)>
		<TELL "narrow " D ,CREVICE
		      " in the wall of the " D ,TUNNEL ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

"*** ATOLL ***"

<OBJECT ON-SCAFFOLD
	(LOC ROOMS)
	(DESC "Scaffold")
	(FLAGS LIGHTED LOCATION INDOORS)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(DOWN PER DOWN-SCAFFOLD)
	(IN PER ON-SCAFFOLD-IN)
	(SOUTH PER DOWN-SCAFFOLD)
	(ACTION ON-SCAFFOLD-F)
	(SEE-ALL MIKE)
	(SEE-S SCAF-STAIR)
	(GLOBAL SCAFFOLD SPEAKER MIKE ; SDOORS TS3-DOOR ESHED ISLAND
	 	SCAF-STAIR)>

<ROUTINE ON-SCAFFOLD-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3354]" D ,CEILING
"[RIDX: 3355]" D ,SCHOOL>
		<COND (<NOT <IS? ,TS3-DOOR ,NOALL>>
		       <TELL ,PTHE "only familiar " D ,MIKE " is the">
		       <OPEN-CLOSED ,TS3-DOOR>
		       <TELL "[RIDX: 3358]">)>
		<TELL ,PCR "A " D ,SCAF-STAIR " leads ">
	 	<COND (<HERE? ON-SCAFFOLD>
		       <TELL "down">)
	       	      (T
			<TELL "up">)>
		<TELL "ward." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE DOWN-SCAFFOLD ()
	 <TELL "You descend the " D ,SCAF-STAIR ,PCR>
	 <RETURN ,AT-SDOORS>>

<ROUTINE ON-SCAFFOLD-IN ()
	 <COND (<IS? ,TS3-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS3-DOOR ,OPENED>
		<DEQUEUE I-FLIPPER>
		<DEQUEUE I-TIDE>
		<DEQUEUE I-CRABS>
		<TELL "[RIDX: 3365]"
		      D ,TS3-DOOR ,PERIOD>
		<EXIT-HOLE ,TS3-DOOR ,ON-MESA>
		<RFALSE>)>
	 <ITS-CLOSED ,TS3-DOOR>
	 <RFALSE>>

<OBJECT AT-SDOORS
	(LOC ROOMS)
	(DESC "Bottom of Scaffold")
	(FLAGS LIGHTED LOCATION INDOORS)
      ; (HEAR 0)
      ; (ODOR 0)
      ; (OVERHEAD 0)
	(OUT TO SSAND IF SDOORS IS OPEN)
	(SOUTH TO SSAND IF SDOORS IS OPEN)
	(UP PER CLIMB-SCAFFOLD)
	(NORTH PER CLIMB-SCAFFOLD)
	(ACTION AT-SDOORS-F)
	(SEE-ALL MIKE)
	(SEE-N SCAF-STAIR)
	(SEE-S SDOORS)
	(GLOBAL SDOORS ESHED SPEAKER ISLAND SCAF-STAIR SCAFFOLD MIKE)>

<ROUTINE AT-SDOORS-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3368]" D ,SCAFFOLD " overlooking the " D ,MIKE
"[RIDX: 3370]">
		<COND (<IS? ,SDOORS ,OPENED>
		       <TELL "n open ">)
		      (T
		       <TELL " closed ">)>
		<TELL "set of " D ,SDOORS
"[RIDX: 3374]" D ,SPEAKER "[RIDX: 3375]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE CLIMB-SCAFFOLD ()
	 <TELL "You ascend the " D ,SCAF-STAIR ,PCR>
	 <RETURN ,ON-SCAFFOLD>>

<OBJECT SSAND
	(LOC ROOMS)
	(DESC "South Beach")
	(FLAGS LIGHTED LOCATION NOGRASS)
	(HEAR LAGOON)
	(ODOR LAGOON)
      ; (OVERHEAD 0)
	(NORTH TO AT-SDOORS IF SDOORS IS OPEN)
	(NE PER TO-ESAND)
	(EAST PER TO-ESAND)
	(SE PER LAGOON-SWIMMING)
	(SOUTH PER LAGOON-SWIMMING)
	(SW PER LAGOON-SWIMMING)
	(WEST PER TO-WSAND)
	(NW PER TO-WSAND)
	(IN TO AT-SDOORS IF SDOORS IS OPEN)
	(ACTION SSAND-F)
	(SEE-ALL LAGOON)
	(SEE-N SDOORS)
	(SEE-NE BEACH)
	(SEE-NW BEACH)
	(GLOBAL SDOORS ESHED LSPEAKERS LAGOON ISLAND BEACH)>

"SEEN = quote seen."

<ROUTINE SSAND-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<SETG P-IT-OBJECT ,OBUTTON>
		<TELL "[RIDX: 3380]" D ,LAGOON
"[RIDX: 3381]" D ,ISLAND
"[RIDX: 3382]" ,TON
"[RIDX: 3383]" D ,OBUTTON
"[RIDX: 3384]">
		<OPEN-CLOSED ,SDOORS>
		<TELL " of the shed." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE TO-ESAND ()
	 <WALK-BEACH>
	 <RETURN ,ESAND>>

<ROUTINE TO-WSAND ()
	 <WALK-BEACH>
	 <RETURN ,WSAND>>

<ROUTINE TO-NSAND ()
	 <WALK-BEACH>
	 <RETURN ,NSAND>>

<ROUTINE TO-SSAND ()
	 <WALK-BEACH>
	 <RETURN ,SSAND>>

<ROUTINE WALK-BEACH ()
	 <TELL "You ">
	 <COND (<HERE? NSAND>
		<TELL "duck under the " D ,TUBE " and ">)>
	 <TELL "[RIDX: 3389]" D ,BEACH ,PCR>
	 <RTRUE>>

<ROUTINE LAGOON-SWIMMING ()
	 <COND (<IS? ,LAGOON ,SEEN>
		<TELL
"[RIDX: 3390]" CR>
		<RFALSE>)>
	 <MAKE ,LAGOON ,SEEN>
	 <TELL
"[RIDX: 3391]" D ,LAGOON
"[RIDX: 3392]" CR><PRINT-ID "places:3490">
	 <RFALSE>>

<OBJECT ESAND
	(LOC ROOMS)
	(DESC "East Beach")
	(FLAGS LIGHTED LOCATION NOGRASS)
	(HEAR LAGOON)
	(ODOR LAGOON)
      ; (OVERHEAD 0)
	(NORTH PER TO-NSAND)
	(NE PER LAGOON-SWIMMING)
	(EAST PER LAGOON-SWIMMING)
	(SE PER LAGOON-SWIMMING)
	(SOUTH PER TO-SSAND)
	(SW PER TO-SSAND)
	(WEST PER ESHED-BLOCKS)
	(NW PER TO-NSAND)
	(ACTION ESAND-F)
	(SEE-ALL LAGOON)
	(SEE-W ESHED)
	(SEE-NW BEACH)
	(SEE-SW BEACH)
	(GLOBAL ESHED LSPEAKERS ISLAND LAGOON BEACH)>

<ROUTINE ESAND-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3396]" D ,LAGOON
"[RIDX: 3397]" D ,BEACH
"[RIDX: 3398]" D ,ESHED ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NSAND
	(LOC ROOMS)
	(DESC "North Beach")
	(FLAGS LIGHTED LOCATION NOGRASS)
	(HEAR LAGOON)
	(ODOR LAGOON)
      ; (OVERHEAD 0)
	(NORTH PER LAGOON-SWIMMING)
	(NE PER LAGOON-SWIMMING)
	(EAST PER TO-ESAND)
	(SE PER TO-ESAND)
	(SOUTH PER ESHED-BLOCKS)
	(SW PER TO-WSAND)
	(WEST PER TO-WSAND)
	(NW PER LAGOON-SWIMMING)
	(ACTION NSAND-F)
	(SEE-ALL LAGOON)
	(SEE-S ESHED)
	(SEE-SE BEACH)
	(SEE-SW BEACH)
	(GLOBAL ESHED LSPEAKERS ISLAND LAGOON BEACH)>

<ROUTINE NSAND-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A square wooden " D ,TUBE "[RIDX: 3402]"
D ,SCHOOL "[RIDX: 3403]" D ,LAGOON
"[RIDX: 3404]" D ,ESHED ,TOS "east and southwest." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT WSAND
	(LOC ROOMS)
	(DESC "West Beach")
	(FLAGS LIGHTED LOCATION NOGRASS)
	(HEAR LAGOON)
	(ODOR LAGOON)
      ; (OVERHEAD 0)
	(NORTH PER TO-NSAND)
	(NE PER TO-NSAND)
	(EAST PER ESHED-BLOCKS)
	(SE PER TO-SSAND)
	(SOUTH PER TO-SSAND)
	(SW PER CRABS-ATTACK)
	(WEST PER CRABS-ATTACK)
	(NW PER CRABS-ATTACK)
	(ACTION WSAND-F)
	(SEE-ALL LAGOON)
	(SEE-NE BEACH)
	(SEE-SE BEACH)
	(SEE-E ESHED)
	(SEE-W ISLET)
	(GLOBAL ESHED LSPEAKERS ISLAND LAGOON BEACH NUTS)>

<ROUTINE WSAND-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3408]"
D ,ESHED ,PCR "A tiny " D ,ISLET
"[RIDX: 3410]" CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <NOT <IS? ,CRABS ,NODESC>>>
		<SETG P-THEM-OBJECT ,CRABS>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<ROUTINE CRABS-ATTACK ()
	 <MAKE ,CRABS ,SEEN>
	 <COND (<IS? ,CRABS ,NODESC>
		<UNMAKE ,CRABS ,NODESC>
		<QUEUE I-CRABS -1>
		<MOVE ,CRABS ,WSAND>
		<SETG P-THEM-OBJECT ,CRABS>
		<TELL
"[RIDX: 3411]" CR>
		<RFALSE>)>
	 <TELL "[RIDX: 3412]" D ,CRABS ,CHANGES>
	 <RFALSE>>

"*** NAGASAKI ***"

<OBJECT IN-SKY
	(LOC ROOMS)
	(DESC "Thin Air")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (ODOR 0)
	(OVERHEAD TS5-DOOR)
      ; (HEAR 0)
	(NORTH SORRY "[RIDX: 3415]")
	(NE SORRY "[RIDX: 3415]")
	(EAST SORRY "[RIDX: 3415]")
	(SE SORRY "[RIDX: 3415]")
	(SOUTH SORRY "[RIDX: 3415]")
	(SW SORRY "[RIDX: 3415]")
	(WEST SORRY "[RIDX: 3415]")
	(NW SORRY "[RIDX: 3415]")
	(UP SORRY "[RIDX: 3415]")
	(DOWN SORRY "[RIDX: 3424]")
	(ACTION IN-SKY-F)
	(SEE-ALL SKY)
	(GLOBAL TS5-DOOR CITY NAGASAKI PLANES)>

"[RIDX: 3425]"

<ROUTINE IN-SKY-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "You're ">
		<COND (<IS? ,IN-SKY ,NOALL>
		       <TELL "several">)
		      (T
		       <TELL "fourteen">)>
		<TELL "[RIDX: 3430]">
		<COND (<OR <T? ,SUITED?>
			   <AND <IN? ,PARASOL ,PLAYER>
				<IS? ,PARASOL ,OPENED>>>
		       <TELL "[RIDX: 3431]">
		       <COND (<T? ,SUITED?>
			      <TELL "presses against the " D ,FILM
				    " around you">)
			     (T
			      <TELL "fills your open " D ,PARASOL>)>)
		      (T
		       <TELL "[RIDX: 3435]">
		       <COND (<IS? ,IN-SKY ,NOALL>
			      <TELL "a hundred and thir">)
			     (T
			      <TELL "seven">)>
		       <TELL "ty miles an hour">)>
		<TELL ,PCR
"A " D ,TS5-DOOR "[RIDX: 3440]" CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <NOT <IS? ,IN-SKY ,SEEN>>>
		<MAKE ,IN-SKY ,SEEN>
		<MAKE ,IN-SKY ,NOALL>
		<QUEUE I-FALLING 2>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<OBJECT ON-BIRD
	(LOC ROOMS)
	(DESC "[RIDX: 3441]")
	(FLAGS TOUCHED LIGHTED LOCATION NOGRASS)
      ; (ODOR 0)
	(OVERHEAD 0)
	(HEAR 0)
	(NORTH SORRY "[RIDX: 3415]")
	(NE SORRY "[RIDX: 3415]")
	(EAST SORRY "[RIDX: 3415]")
	(SE SORRY "[RIDX: 3415]")
	(SOUTH SORRY "[RIDX: 3415]")
	(SW SORRY "[RIDX: 3415]")
	(WEST SORRY "[RIDX: 3415]")
	(NW SORRY "[RIDX: 3415]")
	(UP SORRY "[RIDX: 3415]")
	(DOWN SORRY "[RIDX: 3415]")
	(IN PER EXIT-NAGASAKI)
	(SEE-ALL SKY)
	(ACTION ON-BIRD-F)
	(GLOBAL TS5-DOOR CITY NAGASAKI PLANES ; MCRANE)>

<ROUTINE ON-BIRD-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3453]" D ,CRANE ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE EXIT-NAGASAKI ()
	 <COND (<IS? ,TS5-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS5-DOOR ,OPENED>
		<DEQUEUE I-FLIGHT>
		<TELL "You climb off the " D ,MCRANE
		      "[RIDX: 3455]" D ,TS3-DOOR ,PERIOD>
		<EXIT-HOLE ,TS5-DOOR ,ON-MOOR>
		<RFALSE>)>
	 <ITS-CLOSED ,TS5-DOOR>
	 <RFALSE>>

<OBJECT PLAYGROUND
	(LOC ROOMS)
	(DESC "Playground")
	(FLAGS LIGHTED LOCATION)
	(OVERHEAD 0)
	(HEAR 0)
	(NORTH PER CHILDREN-CATCH)
	(NE PER CHILDREN-CATCH)
	(EAST PER ENTER-SHELTER)
	(SE PER TEACHERS-CATCH)
	(SOUTH PER TEACHERS-CATCH)
	(SW PER BUILDING-BLOCKS)
	(WEST PER ENTER-SCHOOL)
	(NW PER BUILDING-BLOCKS)
	(DOWN PER ENTER-SHELTER)
	(IN PER ENTER-SHELTER)
	(OUT PER WHICH-WAY-OUT)
	(ACTION PLAYGROUND-F)
	(SEE-N KIDS)
	(SEE-S TEACHERS)
	(SEE-E SHELTER)
	(SEE-W SCHOOL)
	(SEE-ALL PGROUND)
	(GLOBAL PGROUND CITY NAGASAKI TS5-DOOR SCHOOL PLANES SHELTER DECOR
	 	SHELHOLE DFLIES SDIRT)>

<ROUTINE PLAYGROUND-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "A set of " D ,KIDS "'s " D ,SWINGS " moves ">
		<BACK-AND-FORTH>
		<TELL
"[RIDX: 3461]" D ,SCHOOL ", its " D ,SCHOOL-WINDOWS
" hung with " D ,FLOWERS "[RIDX: 3464]" D ,SHELHOLE ,TOE
"[RIDX: 3465]" D ,SHELTER "[RIDX: 3466]" D ,KIDS
"[RIDX: 3467]" D ,DFLIES
" north of the swing set[RIDX: 3370] group of adults (school"
D ,TEACHERS "[RIDX: 3469]" D ,SHELTER
" like the first." CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-BEG>
		     <VERB? YELL ALARM>>
		<TELL "[RIDX: 3471]" CR>
	 	<TEACHERS-NOTICE>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <IS? ,SPILE ,NODESC>>
		<UNMAKE ,SPILE ,NODESC>
		<TELL CR
"[RIDX: 3472]" D ,SPILE>
		<LOOK-IN-SPILE>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <T? ,IN-SAND?>>
		<EXIT-SPILE>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE LOOK-IN-SPILE ()
	 <COND (<SEE-ANYTHING-IN? ,SPILE>
		<TELL "[RIDX: 3473]">
		<PRINT-CONTENTS ,SPILE>)>
	 <RTRUE>>

<ROUTINE EXIT-SPILE ()
	 <SETG IN-SAND? <>>
	 <SETG OLD-HERE <>>
	 <TELL "[RIDX: 3474]" D ,SPILE " first" ,BRACKET>
	 <RTRUE>>

<ROUTINE ENTER-SCHOOL ()
	 <COND (<T? ,IN-SAND?>
		<EXIT-SPILE>)>
	 <TELL "There are no " D ,SBENTRY "s visible here." CR>
	 <RFALSE>>

<ROUTINE ENTER-SHELTER ()
	 <COND (<T? ,IN-SAND?>
		<EXIT-SPILE>)>
	 <TELL "[RIDX: 3478]" ,PCR>
	 <RETURN ,IN-SHELTER>>

<ROUTINE TEACHERS-CATCH ()
	 <COND (<CHICKEN-OUT? ,TEACHERS>
		<RFALSE>)
	       (<T? ,IN-SAND?>
		<EXIT-SPILE>)>
	 <TELL "[RIDX: 3479]" D ,TEACHERS ,PERIOD>
	 <TEACHERS-NOTICE T>
	 <RFALSE>>

<ROUTINE TEACHERS-NOTICE ("OPTIONAL" (COMING <>))
	 <TELL CR
"[RIDX: 3481]">
	 <COND (<ZERO? .COMING>
		<TELL "standing ">
	 	<COND (<ZERO? ,IN-SAND?>
		       <TELL "by ">)
	       	      (T
		       <TELL "in ">)>
		<TELL THE ,SPILE>)
	       (T
		<TELL "coming">)>
	 <TELL
"[RIDX: 3486]" D ,SHELTER "[RIDX: 3487]">
	 <PRINT-ID "places:3828"><JIGS-UP>
	 <RTRUE>>

<ROUTINE CHILDREN-CATCH ()
	 <COND (<CHICKEN-OUT? ,KIDS>
		<RFALSE>)
	       (<T? ,IN-SAND?>
		<EXIT-SPILE>)>
	 <TELL CTHE ,KIDS
"[RIDX: 3489]" CR>
	 <TEACHERS-NOTICE T>
	 <RFALSE>>

<ROUTINE CHICKEN-OUT? (WHO)
	 <TELL "[RIDX: 3490]" THE .WHO
"[RIDX: 3491]" ,PCR>
	 <SAY-SURE>
	 <TELL "go that way?">
	 <COND (<YES?>
		<CRLF>
		<RFALSE>)>
	 <NO-DETECTION>
	 <RTRUE>>

<OBJECT IN-SHELTER
	(LOC ROOMS)
	(DESC "Shelter")
	(FLAGS LIGHTED LOCATION INDOORS)
	(ODOR PEE)
	(HEAR 0)
	(OVERHEAD 0)
	(UP PER EXIT-SHELTER)
	(OUT PER EXIT-SHELTER)
	(WEST PER EXIT-SHELTER)
	(IN SORRY "[RIDX: 3494]")
	(DOWN SORRY "[RIDX: 3494]")
	(ACTION IN-SHELTER-F)
	(SEE-ALL WALLS)
	(SEE-W SHELHOLE)
	(GLOBAL SHELTER SHELHOLE CITY NAGASAKI TS5-DOOR PLANES SDIRT)>

<ROUTINE IN-SHELTER-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3497]"
D ,FLOOR "[RIDX: 3498]" D ,CORNER "s reek of "
D ,PEE "[RIDX: 3500]" D ,SHELHOLE ,TOW ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE EXIT-SHELTER ()
	 <TELL "[RIDX: 3501]" ,PCR>
	 <RETURN ,PLAYGROUND>>

"*** TRINITY ***"

<OBJECT IN-SHACK
	(LOC ROOMS)
	(DESC "Shack")
	(FLAGS LIGHTED LOCATION INDOORS)
      ; (OVERHEAD 0)
	(HEAR VOICES)
      ; (ODOR 0)
      ; (NORTH SORRY "[RIDX: 3504]")
      ; (NE SORRY "[RIDX: 3504]")
	(EAST PER SLAM-TS6-DOOR)
      ; (SE SORRY "[RIDX: 3504]")
      ; (SOUTH SORRY "[RIDX: 3504]")
      ; (SW SORRY "[RIDX: 3504]")
	(WEST TO TOWER-PLAT)
      ; (NW SORRY "[RIDX: 3504]")
	(OUT PER IN-SHACK-OUT)
	(IN PER SLAM-TS6-DOOR)
	(SEE-ALL WALLS)
	(SEE-E TS6-DOOR)
	(SEE-W SHACK-HOLE)
	(GLOBAL TS6-DOOR SHACK SHACK-HOLE TOWER GCABLES SPOT VOICES)
	(ACTION IN-SHACK-F)>

<ROUTINE IN-SHACK-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "You're in a metal " D ,SHACK
"[RIDX: 3512]" D ,FLOOR
"[RIDX: 3513]" D ,HARDWARE
,PA "d">
		<COND (<IS? ,WATT ,LIGHTED>
		       <TELL "im">)
		      (T
		       <TELL "ark">)>
		<TELL "[RIDX: 3517]" D ,CEILING>
		<COND (<IS? ,WATT ,LIGHTED>
		       <TELL
", filling the " D ,DSHADOW "s with a sullen glow">)>

		<COND (<IS? ,SPOT ,SEEN>
		       <TELL "[RIDX: 3520]">)
		      (T
		       <TELL ". You can see an ">)>
		<TELL "[RIDX: 3522]" D ,GADGET "[RIDX: 3523]"
D ,FLOOR ". Its " D ,CSURFACE " is studded with " D ,GBOLTS
"[RIDX: 3526]" D ,GCABLES
"[RIDX: 3527]" D ,X5 " nearby.|
|
A">
		<OPEN-CLOSED ,TS6-DOOR T>
		<TELL "[RIDX: 3529]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE IN-SHACK-OUT ()
	 <COND (<IS? ,TS6-DOOR ,OPENED>
		<WHICH-WAY-OUT>
		<RFALSE>)>
	 <RETURN ,TOWER-PLAT>>

<ROUTINE SLAM-TS6-DOOR ()
	 <COND (<IS? ,TS6-DOOR ,NOALL>
		<DOOR-NOT-HERE>
		<RFALSE>)
	       (<IS? ,TS6-DOOR ,OPENED>
		<KILL-TS6-DOOR>
	 	<RFALSE>)>
	 <ITS-CLOSED ,TS6-DOOR>
	 <RFALSE>>

<ROUTINE KILL-TS6-DOOR ()
	 <PUTP ,IN-SHACK ,P?SEE-E ,WALLS>
	 <UNMAKE ,TS6-DOOR ,OPENED>
	 <ITALICIZE "Bang!">
	 <TELL "[RIDX: 3531]" CR>
	 <SETG DO-WINDOW <GET ,QUOTES ,BYRNE>>
	 <RTRUE>>

<OBJECT TOWER-PLAT
	(LOC ROOMS)
	(DESC "Tower Platform")
	(FLAGS LIGHTED LOCATION NOGRASS)
	(HEAR VOICES)
      ; (OVERHEAD 0)
      ; (ODOR 0)
	(NORTH PER PLAT-FALL)
	(NE PER PLAT-FALL)
	(EAST TO IN-SHACK)
	(SE PER PLAT-FALL)
	(SOUTH PER PLAT-FALL)
	(SW PER PLAT-FALL)
	(WEST PER PLAT-FALL)
	(NW PER PLAT-FALL)
	(DOWN PER TOWER-PLAT-D)
	(UP SORRY "[RIDX: 3533]")
	(IN TO IN-SHACK)
	(SEE-ALL GDESERT)
	(SEE-E SHACK-HOLE)
	(SEE-SW SPOT)
	(SEE-NE DMOUNTS)
	(SEE-SE DMOUNTS)
	(GLOBAL SHACK SHACK-HOLE TOWER TLADDER GDESERT DMOUNTS SPOT VOICES)
	(ACTION TOWER-PLAT-F)>

<ROUTINE TOWER-PLAT-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3535]" D ,GDESERT
"[RIDX: 3536]" D ,TPLAT "[RIDX: 3537]" D ,SHACK>
		<COND (<IS? ,SPOT ,SEEN>
		       <TELL
,PA D ,SPOT " on the southwest " D ,HORIZON " floods the " D ,PLATFORM
"[RIDX: 3540]">)>
		<TELL ,PA D ,TLADDER "[RIDX: 3541]"
D ,TPLAT "'s edge." CR>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<SETG STAIR-DIR "down">
		<RFALSE>)
	       (T
		<RFALSE>)>>

<ROUTINE TOWER-PLAT-D ()
	 <COND (<IS? ,VOICES ,SEEN>
		<TELL "[RIDX: 3544]" D ,TLADDER
"[RIDX: 3545]" D ,VOICES " below" ,PCR>
		<SAY-SURE>
		<TELL "[RIDX: 3547]">
		<COND (<NOT <YES?>>
		       <NO-DETECTION>
		       <RFALSE>)>)>
	 <COND (<NOT <IS? ,ON-TOWER ,TOUCHED>>
		<TELL "[RIDX: 3548]" D ,TLADDER
"[RIDX: 3549]" D ,CSURFACE ,PCR>)>
	 <RETURN ,ON-TOWER>>

<OBJECT ON-TOWER
	(LOC ROOMS)
	(DESC "Tower Landing")
	(FLAGS LIGHTED LOCATION NOGRASS)
	(OVERHEAD SHACK)
      ; (HEAR 0)
      ; (ODOR 0)
	(UP PER ON-TOWER-U)
	(IN PER WHICH-WAY-IN)
	(DOWN PER ON-TOWER-D)
	(OUT PER WHICH-WAY-OUT)
	(NORTH PER TOWER-FALL)
	(NE PER TOWER-FALL)
	(EAST PER TOWER-FALL)
	(SE PER TOWER-FALL)
	(SOUTH PER TOWER-FALL)
	(SW PER TOWER-FALL)
	(WEST PER TOWER-FALL)
	(NW PER TOWER-FALL)
	(GLOBAL TOWER TLADDER SHACK GDESERT TROPES DMOUNTS SPOT)
	(SEE-SW SPOT)
	(SEE-ALL GDESERT)
	(SEE-E DMOUNTS)
	(SEE-NE DMOUNTS)
	(SEE-SE DMOUNTS)
	(ACTION ON-TOWER-F)>

<ROUTINE ON-TOWER-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<SETG P-IT-OBJECT ,TLADDER>
		<TELL
"[RIDX: 3552]" D ,GDESERT
"[RIDX: 3553]" D ,PLATFORM
"[RIDX: 3554]" D ,GCABLES
" dangle around the " D ,TLADDER " that continues " ,STAIR-DIR "ward." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE TOWER-FALL ()
	 <YOUD-FALL-OFF ,LANDING>
	 <RFALSE>>

<ROUTINE ON-TOWER-U ()
	 <TELL "[RIDX: 3558]" D ,TLADDER ,PCR>
	 <RETURN ,TOWER-PLAT>>

<ROUTINE ON-TOWER-D ()
	 <COND (<NOT <IS? ,AT-ZERO ,TOUCHED>>
		<TELL "[RIDX: 3559]" D ,TLADDER
	       	      " and inch " D ,ME " downward" ,PCR>)>
	 <RETURN ,AT-ZERO>>

<OBJECT AT-ZERO
	(LOC ROOMS)
	(DESC "Base of Tower")
	(FLAGS LIGHTED LOCATION DESERT)
	(OVERHEAD TOWER)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO NZERO)
	(NE TO NEZERO)
	(EAST TO EZERO)
	(SE TO AT-TNT)
	(SOUTH TO S25)
	(SW TO W25)
	(WEST TO WZERO)
	(NW TO N25)
	(UP PER AT-ZERO-U)
	(OUT PER WHICH-WAY-OUT)
	(GLOBAL TOWER TLADDER SHACK GDESERT TROPES NWROAD SWROAD SROAD
	 	SEROAD DMOUNTS SPOT ILINES)
	(SEE-ALL GDESERT)
	(ACTION AT-ZERO-F)>

<ROUTINE AT-ZERO-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "A steel " D ,TOWER
"[RIDX: 3565]" D ,TLADDER ", past dangling " D ,TROPES
", to the " D ,PLATFORM "[RIDX: 3568]" D ,ILINES "[RIDX: 3569]"
D ,GDESERT ,PERIOD>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<SETG STAIR-DIR "up">
		<COND (<NOT <IS? ,MEEP ,CHILLY>>
		       <RFALSE>)>
		<UNMAKE ,MEEP ,CHILLY>
		<QUEUE I-TMEEP -1>
		<SETG P-IT-OBJECT ,RUBY>
		<MAKE ,MEEP ,SEEN>
		<MOVE ,RUBY ,BOX>
		<TELL CR "A familiar " D ,MEEP
"[RIDX: 3572]" D ,MEEP
"[RIDX: 3573]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE AT-ZERO-U ()
	 <TELL "[RIDX: 3574]" D ,TLADDER
	       " and pull " D ,ME " upward." CR>
	 <DO-MOVES 1>
	 <CRLF>
	 <RETURN ,ON-TOWER>>

<OBJECT N75
	(LOC ROOMS)
	(DESC "Paved Road")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D0)
	(NE TO D1)
	(EAST TO D1)
	(SE TO N50)
	(SOUTH TO D3)
	(SW TO D3)
	(WEST TO D0)
	(NW PER GO-TO-NBUNKERS)
	(IN PER ENTER-JEEP)
	(TDIR P?SE)
	(GLOBAL JEEP JEEPARTS SEAT JDOOR DTOWER GDESERT NWROAD DMOUNTS
	 	ILINES NBUNKERS)
	(SEE-ALL GDESERT)
	(SEE-NW NBUNKERS)
	(SEE-SE NWROAD)
	(ACTION N75-F)>

<ROUTINE N75-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3579]" D ,ILINES
"[RIDX: 3580]" D ,NBUNKERS " and " D ,SLIGHT
"s is visible on the " D ,HORIZON ,PTHE D ,PROAD " continues in that "
D ,INTDIR "[RIDX: 3584]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE GO-TO-NBUNKERS ()
	 <COND (<IS? ,NBUNKERS ,SEEN>
		<YOU-MARCH>
		<TELL " towards the " D ,NBUNKERS "[RIDX: 3586]"
D ,SHELTER "[RIDX: 3587]" ,AGROUND
"[RIDX: 3588]" CR>
		<HOLD-IT>
		<SURROUNDED>
		<RFALSE>)>
	 <MAKE ,NBUNKERS ,SEEN>
	 <TAKE-A-MOMENT-TO ,NBUNKERS>
	 <RFALSE>>

<ROUTINE ENTER-JEEP ()
	 <COND (<NOT <IS? ,JDOOR ,OPENED>>
		<MAKE ,JDOOR ,OPENED>
		<TELL "[" D ,CAVE-HOLE " the " D ,JDOOR " first" ,BRACKET>)>
	 <TELL "[RIDX: 3592]" ,PCR>
	 <RETURN ,IN-JEEP>>

<OBJECT IN-JEEP
	(LOC ROOMS)
	(DESC "Jeep")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH SORRY "[RIDX: 3594]")
	(NE SORRY "[RIDX: 3594]")
	(EAST SORRY "[RIDX: 3594]")
	(SE SORRY "[RIDX: 3594]")
	(SOUTH SORRY "[RIDX: 3594]")
	(SW SORRY "[RIDX: 3594]")
	(WEST SORRY "[RIDX: 3594]")
	(NW SORRY "[RIDX: 3594]")
	(IN SORRY "[RIDX: 3602]")
	(OUT PER EXIT-JEEP)
	(GLOBAL JEEP JEEPARTS SEAT JDOOR DTOWER GDESERT NWROAD DMOUNTS
	 	NBUNKERS)
	(SEE-ALL GDESERT)
	(SEE-NW NBUNKERS)
	(SEE-SE NWROAD)
	(TDIR P?OUT)
	(ACTION IN-JEEP-F)>

<ROUTINE IN-JEEP-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3604]" D ,FLOOR ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE EXIT-JEEP ()
	 <COND (<IS? ,JDOOR ,OPENED>
		<TELL "[RIDX: 3605]" ,PCR>
		<RETURN ,N75>)>
	 <ITS-CLOSED ,JDOOR>
	 <RFALSE>>

<OBJECT N50
	(LOC ROOMS)
	(DESC "Paved Road")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D1)
	(NE TO D1)
	(EAST TO D1)
	(SE TO N25)
	(SOUTH TO D3)
	(SW TO D3)
	(WEST TO D3)
	(NW TO N75)
	(TDIR P?SE)
	(GLOBAL DTOWER GDESERT NWROAD DMOUNTS ILINES)
	(SEE-ALL GDESERT)
	(SEE-NW NWROAD)
	(SEE-SE DTOWER)
	(ACTION N50-F)>

<ROUTINE N50-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "A " D ,PROAD "[RIDX: 3609]"
D ,GDESERT "[RIDX: 3610]" D ,DTOWER ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT N25
	(LOC ROOMS)
	(DESC "Northwest of Tower")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D1)
	(NE TO D1)
	(EAST TO NZERO)
	(SE TO AT-ZERO)
	(SOUTH TO WZERO)
	(SW TO D3)
	(WEST TO D3)
	(NW TO N50)
	(TDIR P?SE)
	(GLOBAL DTOWER GDESERT NWROAD DTRAIL DMOUNTS ILINES)
	(SEE-ALL GDESERT)
	(SEE-NW NWROAD)
	(SEE-SE DTOWER)
	(SEE-S DTRAIL)
	(ACTION N25-F)>

<ROUTINE N25-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3613]" D ,ILINES
" follow a " D ,PROAD " northwest " ,INTO-DESERT
", while a " D ,DTRAIL " curves away" ,TOS ,PCR CTHE ,DTOWER
"[RIDX: 3618]" D ,TMOUNTS ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NZERO
	(LOC ROOMS)
	(DESC "North of Tower")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D1)
	(NE TO D2)
	(EAST TO NEZERO)
	(SE TO EZERO)
	(SOUTH TO AT-ZERO)
	(SW TO WZERO)
	(WEST TO N25)
	(NW TO D1)
	(TDIR P?SOUTH)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-S DTOWER)
	(ACTION NZERO-F)>

<ROUTINE NZERO-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,TOWER
" is visible not far" ,TOS "[RIDX: 3622]"
D ,GDESERT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NEZERO
	(LOC ROOMS)
	(DESC "Northeast of Tower")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D2)
	(NE TO D2)
	(EAST TO D6)
	(SE TO D6)
	(SOUTH TO EZERO)
	(SW TO AT-ZERO)
	(WEST TO NZERO)
	(NW TO D1)
	(TDIR P?SW)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-SW DTOWER)
	(ACTION NEZERO-F)>

<ROUTINE NEZERO-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,TOWER " on the southwest " D ,HORIZON
"[RIDX: 3626]" D ,GDESERT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT EZERO
	(LOC ROOMS)
	(DESC "East of Tower")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO NEZERO)
	(NE TO D6)
	(EAST TO D6)
	(SE TO D6)
	(SOUTH TO AT-TNT)
	(SW TO S25)
	(WEST TO AT-ZERO)
	(NW TO NZERO)
	(TDIR P?WEST)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-W DTOWER)
	(ACTION EZERO-F)>

<ROUTINE EZERO-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3629]" D GDESERT
		      " lies between the " D ,TOWER ,TOW
		      ", and a range of " D ,TMOUNTS ,TOE ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT AT-TNT
	(LOC ROOMS)
	(DESC "Shallow Crater")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO EZERO)
	(NE TO D6)
	(EAST TO D6)
	(SE TO NWRANCH)
	(SOUTH TO D8)
	(SW TO D8)
	(WEST TO S25)
	(NW TO AT-ZERO)
	(TDIR P?NW)
	(GLOBAL DTOWER GDESERT DMOUNTS RANCH-ROAD TCRATER)
	(SEE-ALL GDESERT)
	(SEE-SE RANCH-ROAD)
	(SEE-NW DTOWER)
	(ACTION AT-TNT-F)>

<ROUTINE AT-TNT-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3634]" D ,TCRATER " in the "
D ,GDESERT "[RIDX: 3636]" D ,PROAD " leads southeast " ,INTO-DESERT "[RIDX: 3638]"
D ,DTOWER ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT WZERO
	(LOC ROOMS)
	(DESC "West of Tower")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO N25)
	(NE TO NZERO)
	(EAST TO AT-ZERO)
	(SE TO S25)
	(SOUTH TO W25)
	(SW TO D5)
	(WEST TO D3)
	(NW TO D3)
	(TDIR P?EAST)
	(GLOBAL DTOWER GDESERT DTRAIL DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-E DTOWER)
	(SEE-N DTRAIL)
	(SEE-S DTRAIL)
	(ACTION WZERO-F)>

<ROUTINE WZERO-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A tall " D ,FRAME "[RIDX: 3642]"
D ,TOWER " visible not far" ,TOE
"[RIDX: 3644]" D ,JUMBO
"[RIDX: 3645]" D ,DTRAIL "[RIDX: 3646]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT W25
	(LOC ROOMS)
	(DESC "Southwest of Tower")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO WZERO)
	(NE TO AT-ZERO)
	(EAST TO S25)
	(SE TO D7)
	(SOUTH TO D7)
	(SW TO W50)
	(WEST TO D5)
	(NW TO D3)
	(TDIR P?NE)
	(GLOBAL DTOWER GDESERT SWROAD DTRAIL DMOUNTS ILINES)
	(SEE-ALL GDESERT)
	(SEE-NE DTOWER)
	(SEE-SW SWROAD)
	(SEE-N DTRAIL)
	(ACTION W25-F)>

<ROUTINE W25-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A " D ,PROAD "[RIDX: 3650]" D ,DTOWER
", and southwest " ,INTO-DESERT ". There's also a "
D ,DTRAIL " bearing north." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT W50
	(LOC ROOMS)
	(DESC "Paved Road")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D5)
	(NE TO W25)
	(EAST TO D7)
	(SE TO D7)
	(SOUTH TO D7)
	(SW TO W75)
	(WEST TO D5)
	(NW TO D5)
	(TDIR P?NE)
	(GLOBAL DTOWER GDESERT SWROAD DMOUNTS ILINES)
	(SEE-ALL GDESERT)
	(SEE-NE DTOWER)
	(SEE-SW SWROAD)
	(ACTION W50-F)>

<ROUTINE W50-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,DTOWER
"[RIDX: 3656]" D ,HORIZON ,PTHE D ,RANCH-ROAD
"[RIDX: 3657]" ,INTO-DESERT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT W75
	(LOC ROOMS)
	(DESC "Crossroads")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D5)
	(NE TO W50)
	(EAST TO D7)
	(SE TO NEPASS)
	(SOUTH TO D10)
	(SW TO W100)
	(WEST TO D5)
	(NW TO D5)
	(TDIR P?NE)
	(GLOBAL DTOWER SEROAD GDESERT SWROAD DMOUNTS D5ROAD ILINES)
	(SEE-ALL GDESERT)
	(SEE-NE SWROAD)
	(SEE-SE SEROAD)
	(SEE-SW SWROAD)
	(ACTION W75-F)>

<ROUTINE W75-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A " D ,PROAD "[RIDX: 3661]" D ,DTRAIL " peters off" ,TON "west." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT W100
	(LOC ROOMS)
	(DESC "Outside Blockhouse")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
	(HEAR DOG)
	(ODOR DOG)
	(NORTH TO D5)
	(NE TO W75)
	(EAST TO D10)
	(SE TO D10)
	(SOUTH TO D9)
	(SW PER W100-SW)
	(WEST TO D9)
	(NW PER W100-NW)
	(TDIR P?NE)
	(GLOBAL DTOWER GDESERT SWROAD DMOUNTS ILINES)
	(SEE-ALL GDESERT)
	(SEE-NE SWROAD)
	(ACTION W100-F)>

<ROUTINE W100-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The military " D ,BHOUSE
"[RIDX: 3667]" D ,SLIGHT
"[RIDX: 3668]">
		<COND (<T? ,DISTRACTION>
		       <TELL "onto the road">)
		      (T
		       <TELL "[RIDX: 3670]">)>
		<PRINT ,PERIOD>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-BEG>
		     <IN? ,DOG ,W100>
		     <VERB? YELL ALARM>>
		<WAKE-DOG>
		<RTRUE>)
	       (<EQUAL? .CONTEXT ,M-ENTERED>
		<COND (<T? ,DISTRACTION>
		       <TELL CR "A great, big " D ,DOG " is making">
		       <AKC>
		       <HOLD-IT>
	 	       <KINDA-SPY>
	 	       <SURROUNDED>
	 	       <RTRUE>)
		      (<AND <IN? ,FEATHERS ,W100>
			    <NOT <IS? ,FEATHERS ,SEEN>>>
		       <MAKE ,FEATHERS ,SEEN>
	 	       <TELL CR "[RIDX: 3673]" D ,FEATHERS
" lies scattered" ,AGROUND
"[RIDX: 3675]"
D ,GDESERT ,PERIOD>
		       <RTRUE>)>
		<RFALSE>)
	       (T
		<RFALSE>)>>

<ROUTINE W100-NW ()
	 <TELL "[RIDX: 3676]" D ,BHOUSE ,PCR>
	 <RETURN ,D5>>

<ROUTINE W100-SW ()
	 <COND (<G? ,MINUTES 27>
		<AIMLESS ,D9>
		<RETURN ,D9>)>
	 <TELL
"[RIDX: 3677]" CR>
	 <RFALSE>>

<OBJECT S25
	(LOC ROOMS)
	(DESC "South of Tower")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO AT-ZERO)
	(NE TO EZERO)
	(EAST TO AT-TNT)
	(SE TO D8)
	(SOUTH TO S50)
	(SW TO D7)
	(WEST TO W25)
	(NW TO WZERO)
	(TDIR P?NORTH)
	(GLOBAL DTOWER GDESERT SROAD DMOUNTS ILINES)
	(SEE-ALL GDESERT)
	(SEE-N DTOWER)
	(SEE-S SROAD)
	(ACTION S25-F)>

<ROUTINE S25-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3680]" ,INTO-DESERT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT S50
	(LOC ROOMS)
	(DESC "Paved Road")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO S25)
	(NE TO D8)
	(EAST TO D8)
	(SE TO D8)
	(SOUTH TO S75)
	(SW TO D7)
	(WEST TO D7)
	(NW TO D7)
	(TDIR P?NORTH)
	(GLOBAL DTOWER GDESERT SROAD DMOUNTS ILINES)
	(SEE-ALL GDESERT)
	(SEE-N DTOWER)
	(SEE-S SROAD)
	(ACTION S50-F)>

<ROUTINE S50-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A " D ,PROAD "[RIDX: 3684]"
D ,GDESERT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT S75
	(LOC ROOMS)
	(DESC "Paved Road")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO S50)
	(NE TO D8)
	(EAST TO D11)
	(SE TO D11)
	(SOUTH TO S100)
	(SW TO D10)
	(WEST TO D10)
	(NW TO NEPASS)
	(TDIR P?NORTH)
	(GLOBAL DTOWER GDESERT SROAD DMOUNTS ILINES D11ROAD)
	(SEE-ALL GDESERT)
	(SEE-N SROAD)
	(SEE-S SROAD)
	(SEE-NW D11ROAD)
	(SEE-SE D11ROAD)
	(ACTION S75-F)>

<ROUTINE S75-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A " D ,PROAD "[RIDX: 3688]"
D ,GDESERT "[RIDX: 3689]" D ,DTRAIL
" wanders off" ,TOS "east." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT S100
	(LOC ROOMS)
	(DESC "Behind the Shed")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
	(HEAR JEEPS)
      ; (ODOR JEEPS)
	(NORTH TO S75)
	(NE PER S100-NE)
	(EAST PER S100-E)
	(SE TO D11)
	(SOUTH PER S100-S)
	(SW TO D10)
	(WEST TO D10)
	(NW TO D10)
	(TDIR P?NORTH)
	(GLOBAL DTOWER GDESERT SROAD DMOUNTS ILINES GIBINOS VOICES)
	(SEE-NE SBUNK)
	(SEE-N SROAD)
	(SEE-S SROAD)
	(SEE-ALL GDESERT)
	(ACTION S100-F)>

<ROUTINE S100-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3694]" D ,SHED "[RIDX: 3695]" D ,CORNER "[RIDX: 3696]" D ,SBUNK
" immediately" ,TON "east. Several " D ,JEEPS>
		<COND (<L? ,MINUTES 28>
		       <TELL ", manned by nervous " D ,GIS ",">)>
		<TELL
"[RIDX: 3701]" D ,SBUNK "'s open " D ,SBENTRY ,PCR>
		<HEAR-SBUNK>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <NOT <IS? ,SBUNK ,TOUCHED>>>
		<MAKE ,SBUNK ,TOUCHED>
		<COND (<L? ,MINUTES 15>
		       <TELL CR
"[RIDX: 3703]" D ,SHELTER
"'s " D ,SBENTRY "[RIDX: 3705]" CR>
		       <RTRUE>)>
		<RFALSE>)
	       (<EQUAL? .CONTEXT ,M-ENTERING>
		<TELL "You ">
		<COND (<PROB 50>
		       <TELL "run for cover">)
		      (T
		       <TELL "dodge into hiding">)>
		<TELL " at the ">
		<COND (<PROB 50>
		       <TELL "[RIDX: 3710]">)
		      (T
		       <TELL "[RIDX: 3711]">)>
		<TELL ,PCR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE S100-NE ()
	 <TELL "[RIDX: 3712]" D ,SHELTER>
	 <BUT-HESITATE "rifle">
	 <RFALSE>>

<ROUTINE S100-S ()
	 <TELL "[RIDX: 3714]">
	 <BUT-HESITATE "pair of binoculars">
	 <RFALSE>>

<ROUTINE BUT-HESITATE (STR)
	 <TELL "[RIDX: 3716]" D ,GIS>
	 <COND (<G? ,MINUTES 27>
		<TELL " in the " D ,TRENCHES>)>
	 <TELL " fingering a " .STR "[RIDX: 3719]">
	 <COND (<NOT <YES?>>
		<NO-DETECTION>
		<RFALSE>)>
	 <CRLF>
	 <YOU-MARCH>
	 <TELL "[RIDX: 3720]">
	 <COND (<EQUAL? .STR "rifle">
		<TELL "with the rifle">)
	       (T
		<TELL "[RIDX: 3723]">)>
	 <TELL " leaps out of his ">
	 <COND (<L? ,MINUTES 28>
		<TELL D ,JEEP>)
	       (T
		<TELL "trench">)>
	 <TELL "[RIDX: 3726]">
	 <ITALICIZE "that?">
	 <TELL "\"" CR>
	 <SURROUNDED>
	 <RFALSE>>

<ROUTINE YOU-MARCH ()
	 <TELL "You ">
	 <COND (<EQUAL? ,P-PRSA-WORD ,W?RUN ,W?JOG ,W?CRAWL>
		<PRINTB ,P-PRSA-WORD>)
	       (T
		<TELL "march confidently">)>
	 <RTRUE>>

<ROUTINE S100-E ()
	 <TELL "[RIDX: 3731]" ,PCR>
	 <RETURN ,D11>>

<ROUTINE HEAR-SBUNK ()
	 <TELL
"Muted " D ,VOICES "[RIDX: 3733]"
D ,SBUNK ,PERIOD>
	 <RTRUE>>

<OBJECT NEPASS
	(LOC ROOMS)
	(DESC "Paved Road")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D7)
	(NE TO D7)
	(EAST TO D7)
	(SE TO S75)
	(SOUTH TO D10)
	(SW TO D10)
	(WEST TO D10)
	(NW TO W75)
	(TDIR P?NE)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-NW PROAD)
	(SEE-SE PROAD)
	(ACTION NEPASS-F)>

<ROUTINE NEPASS-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"A " D ,PROAD "[RIDX: 3737]" D ,GDESERT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT D0
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER BORING-DESERT)
	(NE PER BORING-DESERT)
	(EAST PER D0-E)
	(SE TO D3)
	(SOUTH PER D0-S)
	(SW PER BORING-DESERT)
	(WEST PER BORING-DESERT)
	(NW PER BORING-DESERT)
      ; (TDIR 0)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(ACTION D0-F)>

<ROUTINE D0-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Bleak, featureless "
D ,GDESERT "[RIDX: 3741]" D ,INTDIR ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D0-S ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,N75> ,DROOM)
			 (T ,D3)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D0-E ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,N75> ,DROOM)
			 (T ,D1)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

;<GLOBAL DROOM:OBJECT <>>

<ROUTINE BORING-DESERT ()
	 <TELL <PICK-NEXT ,DESERT-BORES> ,PERIOD>
	 <RFALSE>>

<GLOBAL DESERT-BORES:TABLE
	<LTABLE 2
	 "[RIDX: 3744]"
	 "[RIDX: 3745]"
	 "[RIDX: 3746]">>

<OBJECT D1
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER BORING-DESERT)
	(NE PER BORING-DESERT)
	(EAST TO D2)
	(SE PER D1-SE)
	(SOUTH PER D1-S)
	(SW PER D1-SW)
	(WEST PER D1-W)
	(NW PER BORING-DESERT)
      ; (TDIR 0)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(ACTION D1-F)>

<ROUTINE D1-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3749]" D ,GDESERT
"[RIDX: 3750]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D1-SE ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,NEZERO ,NZERO> ,DROOM)
			 (<PROB 50> ,NZERO)
			 (T ,NEZERO)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D1-S ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,N25 ,NZERO ,N50> ,DROOM)
			 (<PROB 50> ,NZERO)
			 (T ,N25)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D1-SW ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,N75 ,N50 ,N25> ,DROOM)
			 (<PROB 50> ,N50)
			 (T ,N25)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D1-W ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,N75 ,N50> ,DROOM)
			 (<PROB 50> ,N75)
			 (T ,D0)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D2
	(LOC ROOMS)
	(DESC "Foothills")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER BORING-DESERT)
	(NE PER FHILLS-TOO-STEEP)
	(EAST PER FHILLS-TOO-STEEP)
	(SE PER FHILLS-TOO-STEEP)
	(SOUTH PER D2-S)
	(SW PER D2-SW)
	(WEST TO D1)
	(NW PER BORING-DESERT)
      ; (TDIR 0)
	(GLOBAL DTOWER GDESERT FHILLS DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-E FHILLS)
	(SEE-NE FHILLS)
	(SEE-SE FHILLS)
	(ACTION D2-F)>

<ROUTINE D2-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The trackless " D ,GDESERT
"[RIDX: 3758]" D ,FHILLS " in the east." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D2-S ("AUX" DEST)
	 <SET DEST <COND (<OR <EQUAL? ,DROOM ,NEZERO> <PROB 50>> ,NEZERO)
			 (T ,D6)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D2-SW ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,NZERO ,NEZERO> ,DROOM)
			 (<PROB 50> ,NZERO)
			 (T ,NEZERO)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D3
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER D3-N)
	(NE PER D3-NE)
	(EAST PER D3-E)
	(SE PER D3-SE)
	(SOUTH TO D5)
	(SW PER BORING-DESERT)
	(WEST PER BORING-DESERT)
	(NW PER BORING-DESERT)
      ; (TDIR 0)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(ACTION D3-F)>

<ROUTINE D3-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3764]" D ,GDESERT
		      " around you." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D3-N ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,N75 ,N50> ,DROOM)
			 (<PROB 50> ,N75)
			 (T ,D0)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D3-NE ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,N50 ,N75 ,N25> ,DROOM)
			 (<PROB 50> ,N50)
			 (T ,N25)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D3-E ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,N25 ,N50 ,WZERO> ,DROOM)
			 (<PROB 50> ,N25)
			 (T ,N50)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D3-SE ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,WZERO ,W25> ,DROOM)
			 (<PROB 50> ,WZERO)
			 (T ,W25)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D5
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D3)
	(NE TO WZERO)
	(EAST PER D5-E)
	(SE PER D5-SE)
	(SOUTH PER D5-S)
	(SW PER BORING-DESERT)
	(WEST PER BORING-DESERT)
	(NW PER BORING-DESERT)
      ; (TDIR 0)
	(GLOBAL D5ROAD DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-SE D5ROAD)
	(ACTION D5-F)>

<ROUTINE D5-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Gray, empty " D ,GDESERT
"[RIDX: 3773]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D5-E ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W75 ,W50 ,W25> ,DROOM)
			 (<PROB 50> ,W50)
			 (T ,W25)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D5-SE ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W100 ,W50> ,DROOM)
			 (T ,W75)>>
	 <COND (<EQUAL? .DEST ,W75>
		<RETURN ,W75>)>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D5-S ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W100 ,W75 ,W50> ,DROOM)
			 (<PROB 50> ,W75)
			 (T ,D9)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D6
	(LOC ROOMS)
	(DESC "Foothills")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D2)
	(NE PER FHILLS-TOO-STEEP)
	(EAST PER FHILLS-TOO-STEEP)
	(SE PER D6-SE)
	(SOUTH PER D6-S)
	(SW PER D6-SW)
	(WEST PER D6-W)
	(NW PER D6-NW)
      ; (TDIR 0)
	(GLOBAL DTOWER GDESERT FHILLS DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-E FHILLS)
	(SEE-NE FHILLS)
	(ACTION D6-F)>

<ROUTINE D6-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3779]" D ,GDESERT
" wasteland." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D6-SE ()
	 <COND (<EQUAL? ,DROOM ,NERANCH ,NCIST>
		<AIMLESS ,DROOM>
		<RETURN ,DROOM>)>
	 <FHILLS-TOO-STEEP>
	 <RFALSE>>

<ROUTINE D6-S ("AUX" DEST)
	 <SET DEST <COND (<OR <EQUAL? ,DROOM ,NERANCH ,NCIST ,UNDERM>
			      <EQUAL? ,DROOM ,NWRANCH>>
			  ,DROOM)
			 (<PROB 50> ,D6A)
			 (T ,NCIST)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D6-SW ("AUX" DEST)
	 <SET DEST <COND (<OR <EQUAL? ,DROOM ,NERANCH ,NWRANCH ,NCIST>
			      <EQUAL? ,DROOM ,UNDERM ,EZERO ,AT-TNT>>
			  ,DROOM)
			 (<PROB 50> ,NERANCH)
			 (T ,NCIST)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D6-W ("AUX" DEST)
	 <SET DEST <COND (<OR <EQUAL? ,DROOM ,AT-TNT ,EZERO ,NEZERO>
			      <EQUAL? ,DROOM ,UNDERM ,NCIST ,SCIST>>
			  ,DROOM)
			 (<PROB 50> ,AT-TNT)
			 (T ,EZERO)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D6-NW ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,EZERO ,NEZERO> ,DROOM)
			 (<PROB 50> ,NEZERO)
			 (T ,D2)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D6A
	(LOC ROOMS)
	(DESC "Foothills")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER D6A-N)
	(NE PER D6A-NE)
	(EAST PER FHILLS-TOO-STEEP)
	(SE PER FHILLS-TOO-STEEP)
	(SOUTH TO D11)
	(SW TO D11)
	(WEST PER D6A-W)
	(NW PER D6A-NW)
      ; (TDIR 0)
	(GLOBAL DTOWER GDESERT FHILLS DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-E FHILLS)
	(SEE-NE FHILLS)
	(SEE-SE FHILLS)
	(ACTION D6A-F)>

<ROUTINE D6A-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3787]" D ,TMOUNTS " in the east." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D6A-N ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,SERANCH ,SCIST ,UNDERM> ,DROOM)
			 (<PROB 50> ,SCIST)
			 (T ,D6)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D6A-NE ()
	 <COND (<EQUAL? ,DROOM ,SCIST>
		<AIMLESS ,DROOM>
		<RETURN ,DROOM>)>
	 <FHILLS-TOO-STEEP>
	 <RFALSE>>

<ROUTINE D6A-W ("AUX" DEST)
	 <SET DEST <COND (<PROB 50> ,D8) (T ,D11)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D6A-NW ("AUX" DEST)
	 <SET DEST <COND (<OR <EQUAL? ,DROOM ,SWRANCH ,SERANCH ,SCIST>
			      <EQUAL? ,DROOM ,UNDERM>>
			  ,DROOM)
			 (<PROB 50> ,SEYARD)
			 (T ,D8)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D7
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER D7-N)
	(NE PER D7-NE)
	(EAST TO S50)
	(SE TO S50)
	(SOUTH TO NEPASS)
	(SW TO NEPASS)
	(WEST PER D7-W)
	(NW PER D7-NW)
	(TDIR P?NE)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-NE DTOWER)
	(ACTION D7-F)>

<ROUTINE D7-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The distant " D ,DTOWER
"[RIDX: 3795]" D ,GDESERT " expanse." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D7-N ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W50 ,W25> ,DROOM)
			 (<PROB 50> ,W50)
			 (T ,W25)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D7-NE ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,S50 ,S25> ,DROOM)
			 (<PROB 50> ,S50)
			 (T ,S25)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D7-NW ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W25 ,W50> ,DROOM)
			 (<PROB 50> ,W25)
			 (T ,W50)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D7-W ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W75 ,W50 ,NEPASS> ,DROOM)
			 (<PROB 50> ,W75)
			 (T ,W50)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D8
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER D8-N)
	(NE PER D8-NE)
	(EAST PER D8-E)
	(SE PER D8-SE)
	(SOUTH TO D11)
	(SW PER D8-SW)
	(WEST TO S50)
	(NW PER D8-NW)
	(TDIR P?NW)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-NW DTOWER)
	(ACTION D8-F)>

<ROUTINE D8-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,GDESERT
"[RIDX: 3803]" D ,DTOWER
"[RIDX: 3804]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D8-N ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,AT-TNT ,SWRANCH> ,DROOM)
			 (<PROB 50> ,SWRANCH)
			 (T ,AT-TNT)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D8-NE ("AUX" DEST)
	 <SET DEST <COND (<OR <EQUAL? ,DROOM ,SWRANCH ,NWRANCH ,AT-TNT>
			      <EQUAL? ,DROOM ,SERANCH>>
			  ,DROOM)
			 (<PROB 50> ,NWRANCH)
			 (T ,SWRANCH)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D8-E ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,SWRANCH ,NWRANCH> ,DROOM)
			 (<PROB 50> ,SWRANCH)
			 (T ,D6A)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D8-SE ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,SWRANCH> ,DROOM)
			 (T ,D6A)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D8-SW ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,S50 ,S75> ,DROOM)
			 (<PROB 50> ,S75)
			 (T ,S50)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D8-NW ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,S50 ,S25> ,DROOM)
			 (<PROB 50> ,S25)
			 (T ,S50)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D9
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER D9-N)
	(NE PER D9-NE)
	(EAST PER D9-E)
	(SE PER BORING-DESERT)
	(SOUTH PER BORING-DESERT)
	(SW PER BORING-DESERT)
	(WEST PER BORING-DESERT)
	(NW PER BORING-DESERT)
      ; (TDIR 0)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(ACTION D9-F)>

<ROUTINE D9-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL CTHE ,GDESERT
"[RIDX: 3813]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D9-N ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W100> ,W100)
			 (T ,D5)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D9-NE ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W100 ,D10> ,DROOM)
			 (T ,D10)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D9-E ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W100> ,W100)
			 (T ,D10)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D10
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER D10-N)
	(NE PER D10-NEE)
	(EAST PER D10-NEE)
	(SE PER D10-SE)
	(SOUTH PER BORING-DESERT)
	(SW PER BORING-DESERT)
	(WEST PER D10-W)
	(NW TO W100)
      ; (TDIR 0)
	(GLOBAL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(ACTION D10-F)>

<ROUTINE D10-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"Empty tracts of " D ,GDESERT "[RIDX: 3820]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D10-N ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,W75 ,NEPASS> ,DROOM)
			 (<PROB 50> ,W75)
			 (T ,NEPASS)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D10-SE ()
	 <COND (<OR <EQUAL? ,DROOM ,S100>
		    <PROB 50>>
		<AIMLESS ,S100>
		<RETURN ,S100>)>
	 <BORING-DESERT>
	 <RFALSE>>

<ROUTINE D10-NEE ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,NEPASS ,S75 ,S100> ,DROOM)
			 (<PROB 50> ,S75)
			 (T ,NEPASS)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<ROUTINE D10-W ("AUX" DEST)
	 <SET DEST <COND (<OR <EQUAL? ,DROOM ,W100> <PROB 50>> ,W100)
			 (T ,D9)>>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

<OBJECT D11
	(LOC ROOMS)
	(DESC "Desert")
	(FLAGS LIGHTED LOCATION DESERT BORING)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D8)
	(NE TO D6A)
	(EAST TO D6A)
	(SE PER BORING-DESERT)
	(SOUTH PER BORING-DESERT)
	(SW PER BORING-DESERT)
	(WEST PER D11-NWW)
	(NW PER D11-NWW)
      ; (TDIR 0)
	(GLOBAL D11ROAD DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-NW D11ROAD)
	(ACTION D11-F)>

<ROUTINE D11-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3826]" D ,GDESERT ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE D11-NWW ("AUX" DEST)
	 <SET DEST <COND (<EQUAL? ,DROOM ,S100> ,DROOM)
			 (T ,S75)>>
	 <COND (<EQUAL? .DEST ,S75>
		<RETURN .DEST>)>
	 <AIMLESS .DEST>
	 <RETURN .DEST>>

"*** RANCH AREA ***"

<OBJECT NWRANCH
	(LOC ROOMS)
	(DESC "Northwest of Ranch")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D6)
	(NE TO D6)
	(EAST TO NERANCH)
	(SE TO NWYARD IF NWGATE IS OPEN)
	(SOUTH TO SWRANCH)
	(SW TO D8)
	(WEST TO D8)
	(NW TO AT-TNT)
	(IN TO NWYARD IF NWGATE IS OPEN)
	(TDIR P?NW)
	(WALL-SIDE NWYARD)
	(WALL-DIR P?SE)
	(GLOBAL SWALL NWGATE RANCH RANCH-ROAD DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-SE NWGATE)
	(SEE-NW RANCH-ROAD)
	(ACTION NWRANCH-F)>

<ROUTINE NWRANCH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3831]" D ,CORNER " of a " D ,SWALL ". A">
		<OPEN-CLOSED ,NWGATE T>
		<TELL "[RIDX: 3834]" D ,RANCH ,PCR
		      "A " D ,RANCH-ROAD " bears northwest " ,INTO-DESERT
"[RIDX: 3837]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NWYARD
	(LOC ROOMS)
	(DESC "Back Yard")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER SWALL-BLOCKS)
	(NE PER SWALL-BLOCKS)
	(EAST TO NROOM IF NROOM-DOOR IS OPEN)
	(SE SORRY "[RIDX: 3839]")
	(SOUTH PER ENTER-SHALL)
	(SW PER SWALL-BLOCKS)
	(WEST PER SWALL-BLOCKS)
	(NW TO NWRANCH IF NWGATE IS OPEN)
	(IN PER WHICH-WAY-IN)
	(OUT TO NWRANCH IF NWGATE IS OPEN)
	(TDIR P?NW)
	(WALL-SIDE NWRANCH)
	(WALL-DIR P?NW)
	(GLOBAL SWALL NWGATE NROOM-DOOR RANCH SHALL DTOWER GDESERT DMOUNTS)
	(SEE-ALL SWALL)
	(SEE-NE RANCH)
	(SEE-E NROOM-DOOR)
	(SEE-SE RANCH)
	(SEE-S SHALL)
	(SEE-NW NWGATE)
	(ACTION NWYARD-F)>

<ROUTINE NWYARD-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3841]"
		      D ,RANCH "[RIDX: 3842]" D ,SWALL
		      ,TON "[RIDX: 3843]" D ,SHALL "[RIDX: 3844]">
		<OPEN-CLOSED ,NROOM-DOOR T>
		<TELL ,TOE ", and a">
		<OPEN-CLOSED ,NWGATE T>
		<TELL " in the northwest " D ,CORNER
		      " of the " D ,SWALL ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NERANCH
	(LOC ROOMS)
	(DESC "Northeast of Ranch")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D6)
	(NE TO D6)
	(EAST TO NCIST)
	(SE PER RESERVOIR-BLOCKS)
	(SOUTH TO ERANCH)
	(SW PER SWALL-BLOCKS)
	(IN PER WHICH-WAY-IN)
	(WEST TO NWRANCH)
	(NW TO D6)
      ; (TDIR 0)
	(WALL-SIDE NEYARD)
	(WALL-DIR P?SW)
	(GLOBAL SWALL RANCH RESERVOIR RANCH-ROAD DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-SW RANCH)
	(SEE-SE RESERVOIR)
	(SEE-W RANCH-ROAD)
	(ACTION NERANCH-F)>

<ROUTINE NERANCH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "A dilapidated " D ,RANCH
"[RIDX: 3851]" D ,SWALL
"[RIDX: 3852]"
D ,RESERVOIR ,PA D ,RANCH-ROAD " bends off" ,TOW ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT BROOM
	(LOC ROOMS)
	(DESC "Bedroom")
	(FLAGS LIGHTED LOCATION INDOORS)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(EAST TO NEYARD IF BROOM-DOOR IS OPEN)
	(OUT PER WHICH-WAY-OUT)
	(WEST TO NROOM)
	(IN TO NROOM)
	(GLOBAL BROOM-DOOR RANCH BEDROOM WINDOWS)
	(SEE-E BROOM-DOOR)
	(ACTION BROOM-F)>

<ROUTINE BROOM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3856]" D ,CORNER ", lighter than the " D ,FLOOR
"[RIDX: 3858]">
		<OPEN-CLOSED ,BROOM-DOOR T>
		<TELL
"[RIDX: 3859]"
D ,RANCH ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT IN-BATH
	(LOC ROOMS)
	(DESC "Bathroom")
	(FLAGS LIGHTED LOCATION INDOORS)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(SOUTH TO NROOM)
	(OUT TO NROOM)
	(IN TO NROOM)
	(GLOBAL RANCH BATHROOM WINDOWS)
	(ACTION IN-BATH-F)>

<ROUTINE IN-BATH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "An old porcelain " D ,SINK
"[RIDX: 3863]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NROOM
	(LOC ROOMS)
	(DESC "Spare Room")
	(FLAGS LIGHTED LOCATION INDOORS)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO IN-BATH)
	(EAST TO BROOM)
	(SOUTH TO NWROOM)
	(WEST TO NWYARD IF NROOM-DOOR IS OPEN)
	(IN PER WHICH-WAY-IN)
	(OUT PER WHICH-WAY-OUT)
	(GLOBAL NROOM-DOOR RANCH BATHROOM BEDROOM WINDOWS)
	(SEE-N BATHROOM)
	(SEE-E BEDROOM)
	(SEE-W NROOM-DOOR)
	(ACTION NROOM-F)>

<ROUTINE NROOM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Aside from a">
		<OPEN-CLOSED ,NROOM-DOOR T>
		<TELL ,TOW "[RIDX: 3867]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NWROOM
	(LOC ROOMS)
	(DESC "Northwest Room")
	(FLAGS LIGHTED LOCATION INDOORS)
	(NORTH TO NROOM)
	(EAST TO NEROOM)
	(SOUTH TO SWROOM)
	(OUT PER WHICH-WAY-OUT)
	(IN PER WHICH-WAY-IN)
	(GLOBAL RANCH KITCHEN WINDOWS)
	(SEE-E RANCH)
	(SEE-S KITCHEN)
	(ACTION NWROOM-F)>

<ROUTINE NWROOM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3870]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NEROOM
	(LOC ROOMS)
	(DESC "Assembly Room")
	(FLAGS LIGHTED LOCATION INDOORS)
	(HEAR SNAKE)
	(ODOR SNAKE)
	(NORTH TO IN-CLOSET IF CLOSET-DOOR IS OPEN)
	(IN PER WHICH-WAY-IN)
	(EAST TO ON-PORCH IF NEROOM-DOOR IS OPEN)
	(OUT PER WHICH-WAY-OUT)
	(SOUTH TO SEROOM)
	(WEST TO NWROOM)
	(GLOBAL SNAKE CLOSET-DOOR CLOSET RANCH)
	(SEE-E NEROOM-DOOR)
	(SEE-N CLOSET)
	(SEE-W RANCH)
	(SEE-S RANCH)
	(ACTION NEROOM-F)>

<ROUTINE NEROOM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3873]" D ,AWINDOWS "[RIDX: 3874]">
		<OPEN-CLOSED ,NEROOM-DOOR T>
		<TELL "[RIDX: 3875]">
		<COND (<IS? ,CLOSET-DOOR ,OPENED>
		       <TELL "n open " D ,CLOSET>)
		      (T
		       <TELL " closed">)>
		<TELL
"[RIDX: 3878]" CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-ENTERED>
		     <IS? ,XSNAKE ,NODESC>>
		<UNMAKE ,XSNAKE ,NODESC>
		<QUEUE I-SNAKE -1>
		<TELL CR
"[RIDX: 3879]" ,PCR><PRINT-ID "places:5785">
	 	<HEAR-SNAKE>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-EXIT>
		     <IS? ,SNAKE ,LIVING>>
		<MAKE ,SNAKE ,SEEN>
		<TELL "[RIDX: 3881]" D ,SNAKE
		      ,PCR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE HEAR-SNAKE ()
	 <SETG P-IT-OBJECT ,SNAKE>
	 <TELL
"[RIDX: 3882]" CR>
	 <RTRUE>>

<OBJECT IN-CLOSET
	(LOC ROOMS)
	(DESC "Closet")
	(FLAGS LIGHTED LOCATION INDOORS)
	(HEAR SNAKE)
	(ODOR SNAKE)
	(SOUTH TO NEROOM IF CLOSET-DOOR IS OPEN)
	(OUT TO NEROOM IF CLOSET-DOOR IS OPEN)
	(IN SORRY "[RIDX: 3884]")
	(GLOBAL SNAKE CLOSET-DOOR CLOSET RANCH)
	(SEE-S CLOSET-DOOR)
	(ACTION IN-CLOSET-F)>

<ROUTINE IN-CLOSET-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3886]" D ,CLOSET
". Its single ">
		<COND (<IS? ,CLOSET-DOOR ,OPENED>
		       <TELL "open">)
		      (T
		       <TELL "closed">)>
		<TELL "[RIDX: 3890]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT SWROOM
	(LOC ROOMS)
	(DESC "Kitchen")
	(FLAGS LIGHTED LOCATION INDOORS)
	(NORTH TO NWROOM)
	(EAST TO SEROOM)
	(WEST TO IN-HALL IF SWROOM-DOOR IS OPEN)
	(OUT PER WHICH-WAY-OUT)
	(IN PER WHICH-WAY-IN)
	(GLOBAL SWROOM-DOOR KITCHEN RANCH SHALL WINDOWS)
	(SEE-W SWROOM-DOOR)
	(SEE-N RANCH)
	(SEE-E RANCH)
	(ACTION SWROOM-F)>

<ROUTINE SWROOM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "Disconnected " D ,PIPES " and an open " D ,CUPBOARD>
		<COND (<FIRST? ,CUPBOARD>
		       <TELL " with ">
		       <PRINT-CONTENTS ,CUPBOARD>
		       <TELL " in it">)>
		<TELL
"[RIDX: 3897]">
		<OPEN-CLOSED ,SWROOM-DOOR T>
		<TELL "[RIDX: 3898]" D ,SHALL
		      "[RIDX: 3899]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT SEROOM
	(LOC ROOMS)
	(DESC "Southeast Room")
	(FLAGS LIGHTED LOCATION INDOORS)
	(NORTH TO NEROOM)
	(EAST TO ON-PORCH IF SEROOM-DOOR IS OPEN)
	(WEST TO SWROOM)
	(IN PER WHICH-WAY-IN)
	(OUT PER WHICH-WAY-OUT)
	(GLOBAL KITCHEN RANCH WINDOWS)
	(SEE-N RANCH)
	(SEE-W KITCHEN)
	(SEE-E SEROOM-DOOR)
	(ACTION SEROOM-F)>

<ROUTINE SEROOM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3902]" D ,SEROOM-DOOR "[RIDX: 3903]">
		<COND (<IS? ,SEROOM-DOOR ,OPENED>
		       <TELL "wide open">)
		      (T
		       <TELL "closed">)>
		<TELL "[RIDX: 3906]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT IN-HALL
	(LOC ROOMS)
	(DESC "Hallway")
	(FLAGS LIGHTED LOCATION INDOORS)
	(NORTH TO NWYARD)
	(EAST TO SWROOM IF SWROOM-DOOR IS OPEN)
	(WEST PER ENTER-IHOUSE)
	(DOWN PER ENTER-IHOUSE)
	(SOUTH TO SWYARD)
	(IN PER WHICH-WAY-IN)
	(OUT PER WHICH-WAY-OUT)
	(GLOBAL RANCH ICEHOUSE SWROOM-DOOR KITCHEN SHALL ISTAIR)
	(SEE-E SWROOM-DOOR)
	(SEE-W ISTAIR)
	(SEE-N SHALL)
	(SEE-S SHALL)
	(ACTION IN-HALL-F)>

<ROUTINE IN-HALL-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "This short " D ,SHALL
" opens outdoors" ,TON " and south. A">
		<OPEN-CLOSED ,SWROOM-DOOR T>
		<TELL " leads east into a " D ,KITCHEN
"[RIDX: 3913]" D ,ISTAIR "[RIDX: 3914]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE ENTER-IHOUSE ()
	 <TELL "You descend the " D ,ISTAIR ,PCR>
	 <RETURN ,IHOUSE>>

<OBJECT IHOUSE
	(LOC ROOMS)
	(DESC "Icehouse")
	(FLAGS LIGHTED LOCATION INDOORS)
	(OVERHEAD ISTAIR)
      ; (HEAR 0)
      ; (ODOR 0)
	(UP PER EXIT-IHOUSE)
	(OUT PER EXIT-IHOUSE)
	(EAST PER EXIT-IHOUSE)
	(GLOBAL ICEHOUSE ISTAIR RANCH SHALL)
	(SEE-E ISTAIR)
	(ACTION IHOUSE-F)>

<ROUTINE IHOUSE-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<FEEL-IHOUSE>
		<TELL
"[RIDX: 3918]" D ,ISTAIR " climbing east." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE FEEL-IHOUSE ()
	 <TELL
"[RIDX: 3920]"><PRINT-ID "places:5949">
	 <RTRUE>>

<ROUTINE EXIT-IHOUSE ()
	 <TELL "You trudge up the " D ,ISTAIR ,PCR>
	 <RETURN ,IN-HALL>>

<OBJECT SWRANCH
	(LOC ROOMS)
	(DESC "Southwest of Ranch")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO NWRANCH)
	(NE TO SWYARD IF SWGATE IS OPEN)
	(IN TO SWYARD IF SWGATE IS OPEN)
	(EAST TO SERANCH)
	(SE TO D6A)
	(SOUTH TO D8)
	(SW TO D8)
	(WEST TO D8)
	(NW TO D8)
	(GLOBAL SWALL SWGATE RANCH SHALL DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-NE SWGATE)
	(WALL-SIDE SWYARD)
	(WALL-DIR P?NE)
      ; (TDIR 0)
	(ACTION SWRANCH-F)>

<ROUTINE SWRANCH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The low " D ,SWALL
"[RIDX: 3926]" D ,RANCH
"[RIDX: 3927]" ,TON " and east, and a">
		<OPEN-CLOSED ,SWGATE T>
		<TELL
"[RIDX: 3929]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE ENTER-SHALL ()
	 <TELL "You step into the " D ,SHALL ,PCR>
	 <RETURN ,IN-HALL>>

<OBJECT SEYARD
	(LOC ROOMS)
	(DESC "Southeast Yard")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER CLIMB-PORCH)
	(UP PER CLIMB-PORCH)
	(IN SORRY "[RIDX: 3932]")
	(NE PER SWALL-BLOCKS)
	(EAST PER SWALL-BLOCKS)
	(SE TO SERANCH IF SEGATE IS OPEN)
	(OUT TO SERANCH IF SEGATE IS OPEN)
	(SOUTH PER SWALL-BLOCKS)
	(SW PER SWALL-BLOCKS)
	(WEST TO SWYARD)
	(NW SORRY "[RIDX: 3932]")
	(GLOBAL SWALL SEGATE RANCH PORCH DTOWER GDESERT DMOUNTS)
	(SEE-NW RANCH)
	(SEE-N PORCH)
	(SEE-SE SEGATE)
	(SEE-ALL SWALL)
	(WALL-SIDE SERANCH)
	(WALL-DIR P?SE)
      ; (TDIR 0)
	(ACTION SEYARD-F)>

<ROUTINE SEYARD-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3935]" D ,SWALL
", near the " D ,RANCH "'s southeast " D ,CORNER
,PA "[RIDX: 3938]" ,TON ", and a">
		<OPEN-CLOSED ,SEGATE T>
		<TELL "[RIDX: 3940]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE CLIMB-PORCH ()
	 <TELL "[RIDX: 3941]" ,PCR>
	 <RETURN ,ON-PORCH>>

<OBJECT SERANCH
	(LOC ROOMS)
	(DESC "Southeast of Ranch")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (ODOR 0)
      ; (OVERHEAD 0)
      ; (HEAR 0)
	(NORTH TO ERANCH)
	(NE PER RESERVOIR-BLOCKS)
	(EAST TO SCIST)
	(SE TO D6A)
	(SOUTH TO D6A)
	(SW TO D8)
	(WEST TO SWRANCH)
	(NW TO SEYARD IF SEGATE IS OPEN)
	(IN TO SEYARD IF SEGATE IS OPEN)
      ; (TDIR 0)
	(WALL-SIDE SEYARD)
	(WALL-DIR P?NW)
	(GLOBAL SWALL SEGATE RANCH DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-NW SEGATE)
	(ACTION SERANCH-F)>

<ROUTINE SERANCH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "The low " D ,SWALL
"[RIDX: 3945]" D ,RANCH " has a">
		<OPEN-CLOSED ,SEGATE T>
		<TELL
"[RIDX: 3947]" ,TON
"[RIDX: 3948]" D ,RESERVOIR ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT NEYARD
	(LOC ROOMS)
	(DESC "Northeast Yard")
	(FLAGS LIGHTED LOCATION)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER SWALL-BLOCKS)
	(NE PER SWALL-BLOCKS)
	(EAST PER SWALL-BLOCKS)
	(SE PER SWALL-BLOCKS)
	(SOUTH PER CLIMB-PORCH)
	(UP PER CLIMB-PORCH)
	(SW SORRY "[RIDX: 3839]")
	(WEST TO BROOM IF BROOM-DOOR IS OPEN)
	(IN TO BROOM IF BROOM-DOOR IS OPEN)
	(NW PER SWALL-BLOCKS)
	(GLOBAL BROOM-DOOR SWALL RANCH PORCH RAMP DTOWER GDESERT DMOUNTS)
	(SEE-ALL SWALL)
	(SEE-SW RANCH)
	(SEE-S PORCH)
	(SEE-W BROOM-DOOR)
	(WALL-SIDE NERANCH)
	(WALL-DIR P?NE)
      ; (TDIR 0)
	(ACTION NEYARD-F)>

<ROUTINE NEYARD-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"There aren't any " D ,CAVE-HOLE "s in this " D ,CORNER " of the " D SWALL
,PA "[RIDX: 3938]" ,TOS ", and a">
		<OPEN-CLOSED ,BROOM-DOOR T>
		<TELL " leads west" ,INRANCH>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT SWYARD
	(LOC ROOMS)
	(DESC "Southwest Yard")
	(FLAGS LIGHTED LOCATION)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER ENTER-SHALL)
	(IN PER ENTER-SHALL)
	(NE SORRY "[RIDX: 3839]")
	(EAST TO SEYARD)
	(SE PER SWALL-BLOCKS)
	(SOUTH PER SWALL-BLOCKS)
	(SW TO SWRANCH IF SWGATE IS OPEN)
	(OUT TO SWRANCH IF SWGATE IS OPEN)
	(WEST PER SWALL-BLOCKS)
	(NW PER SWALL-BLOCKS)
	(GLOBAL SWGATE SWALL SHALL RANCH PORCH RAMP DTOWER GDESERT DMOUNTS)
	(SEE-SW SWGATE)
	(SEE-N SHALL)
	(SEE-ALL SWALL)
	(SEE-NE RANCH)
	(WALL-SIDE SWRANCH)
	(WALL-DIR P?SW)
      ; (TDIR 0)
	(ACTION SWYARD-F)>

<ROUTINE SWYARD-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 3961]" D ,CORNER
" of the " D ,RANCH ", just inside the " D ,SWALL ,PA D ,SHALL
"[RIDX: 3964]">
		<OPEN-CLOSED ,SWGATE T>
		<TELL "[RIDX: 3965]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT ON-PORCH
	(LOC ROOMS)
	(DESC "Front Deck")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER ON-PORCH-N)
	(NE PER SWALL-BLOCKS)
	(EAST PER DOWN-RAMP)
	(DOWN PER DOWN-RAMP)
	(SE PER SWALL-BLOCKS)
	(SOUTH PER ON-PORCH-S)
	(SW TO SEROOM IF LEFT-DOOR IS OPEN)
	(WEST PER ENTER-RANCH)
	(NW TO NEROOM IF RIGHT-DOOR IS OPEN)
	(IN PER ENTER-RANCH)
	(GLOBAL SWALL RANCH PORCH RAMP DTOWER GDESERT DMOUNTS)
	(SEE-NW RIGHT-DOOR)
	(SEE-SW LEFT-DOOR)
	(SEE-W RANCH)
	(SEE-E RAMP)
	(SEE-ALL GDESERT)
	(WALL-SIDE ERANCH)
	(WALL-DIR P?EAST)
      ; (TDIR 0)
	(ACTION ON-PORCH-F)>

<ROUTINE ON-PORCH-F ("OPTIONAL" (CONTEXT <>)
		     "AUX" (L <>) (R <>) (B <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<COND (<IS? ,LEFT-DOOR ,OPENED>
		       <SET L T>)>
		<COND (<IS? ,RIGHT-DOOR ,OPENED>
		       <SET R T>)>
		<TELL
"[RIDX: 3969]" ,TOE " side of the "
D ,RANCH ". Two ">
		<COND (<AND <T? .L> <T? .R>>
		       <SET B T>
		       <TELL "open ">)
		      (<AND <ZERO? .L> <ZERO? .R>>
		       <SET B T>
		       <TELL "closed ">)>
		<TELL "doors, ">
		<COND (<ZERO? .B>
		       <SAY-A-DOOR ,LEFT-DOOR>)>
		<TELL "[RIDX: 3975]" D ,CORNER " and ">
		<COND (<ZERO? .B>
		       <SAY-A-DOOR ,RIGHT-DOOR>)>
		<TELL
"[RIDX: 3977]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE SAY-A-DOOR (DOOR)
	 <TELL "a">
	 <COND (<IS? .DOOR ,OPENED>
		<TELL "n open ">)
	       (T
		<TELL " closed ">)>
	 <RTRUE>>

<ROUTINE ENTER-RANCH ("AUX" DEST)
	 <COND (<IS? ,LEFT-DOOR ,OPENED>
		<SET DEST ,SEROOM>
		<COND (<IS? ,RIGHT-DOOR ,OPENED>
		       <TELL
"[RIDX: 3982]" CR>
		       <RFALSE>)>)
	       (<IS? ,RIGHT-DOOR ,OPENED>
		<SET DEST ,NEROOM>)
	       (T
		<SETG P-THEM-OBJECT ,RIGHT-DOOR>
		<TELL "[RIDX: 3983]" CR>
		<RFALSE>)>
	 <TELL "You step inside the " D ,RANCH ,PCR>
	 <RETURN .DEST>>

<ROUTINE DOWN-RAMP ()
	 <TELL "You descend the " D ,RAMP ,PCR>
	 <RETURN ,ERANCH>>

<ROUTINE ON-PORCH-N ()
	 <CLIMB-OFF-PORCH>
	 <RETURN ,NEYARD>>

<ROUTINE ON-PORCH-S ()
	 <CLIMB-OFF-PORCH>
	 <RETURN ,SEYARD>>

<ROUTINE CLIMB-OFF-PORCH ()
	 <TELL "[RIDX: 3986]" ,PCR>
	 <RTRUE>>

<OBJECT ERANCH
	(LOC ROOMS)
	(DESC "Front Yard")
	(FLAGS LIGHTED LOCATION)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO NERANCH)
	(NE TO NCIST)
	(EAST PER RESERVOIR-BLOCKS)
	(SE TO SCIST)
	(SOUTH TO SERANCH)
	(SW PER SWALL-BLOCKS)
	(WEST PER ASCEND-RAMP)
	(UP PER ASCEND-RAMP)
	(NW PER SWALL-BLOCKS)
	(IN PER ASCEND-RAMP)
	(GLOBAL SWALL RANCH RAMP PORCH RESERVOIR RANCH-ROAD DTOWER
		GDESERT DMOUNTS)
	(SEE-E RESERVOIR)
	(SEE-W RANCH)
	(SEE-NW SWALL)
	(SEE-SW SWALL)
	(SEE-ALL GDESERT)
	(WALL-SIDE ON-PORCH)
	(WALL-DIR P?WEST)
      ; (TDIR 0)
	(ACTION ERANCH-F)>

<ROUTINE ERANCH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3989]" D ,RANCH ,TOW ", and a huge cement "
D ,RESERVOIR ,TOE
"[RIDX: 3991]"
D ,SWALL "[RIDX: 3992]"
D ,RESERVOIR "[RIDX: 3993]" D ,SWALL
"[RIDX: 3994]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE ASCEND-RAMP ()
	 <TELL "You ascend the " D ,RAMP ,PCR>
	 <RETURN ,ON-PORCH>>

<OBJECT NCIST
	(LOC ROOMS)
	(DESC "North of Reservoir")
	(FLAGS LIGHTED LOCATION DESERT)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D6)
	(NE TO D6)
	(EAST TO D6)
	(SE TO UNDERM)
	(SOUTH PER RESERVOIR-BLOCKS)
	(SW TO ERANCH)
	(WEST TO NERANCH)
	(NW TO D6)
	(GLOBAL RANCH RESERVOIR MILL MLADDER DTOWER GDESERT DMOUNTS)
	(SEE-S RESERVOIR)
	(SEE-ALL GDESERT)
	(SEE-SE MILL)
	(SEE-SW RANCH)
      ; (TDIR 0)
	(ACTION NCIST-F)>

<ROUTINE NCIST-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 3998]" D ,RESERVOIR
"[RIDX: 3999]" D ,RANCH
"[RIDX: 4000]" D ,MILL ,PERIOD>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<OBJECT UNDERM
	(LOC ROOMS)
	(DESC "Under the Windmill")
	(FLAGS LIGHTED LOCATION DESERT)
	(OVERHEAD MLADDER)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH TO D6)
	(NE TO D6)
	(EAST TO D6)
	(SE TO D6A)
	(SOUTH TO D6A)
	(SW TO SCIST)
	(WEST PER RESERVOIR-BLOCKS)
	(NW TO NCIST)
	(UP PER CLIMB-MILL)
	(GLOBAL MILL RANCH MLADDER RESERVOIR DTOWER GDESERT DMOUNTS)
	(SEE-ALL GDESERT)
	(SEE-W RESERVOIR)
      ; (TDIR 0)
	(ACTION UNDERM-F)>

<ROUTINE UNDERM-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<SETG P-IT-OBJECT ,MLADDER>
		<TELL "A squat wooden " D ,MILL
"[RIDX: 4004]">
		<COND (<IS? ,BINOS ,TOUCHED>
		       <TELL "broken ">)
		      (T
		       <TELL "square ">)>
		<TELL D ,LANDING " that">
		<COND (<IS? ,BINOS ,TOUCHED>
		       <TELL "'s tilted over">)
		      (T
		       <TELL " overlooks">)>
		<TELL "[RIDX: 4010]" D ,RESERVOIR "[RIDX: 4011]" D ,MLADDER "[RIDX: 4012]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE CLIMB-MILL ()
	 <COND (<IS? ,BINOS ,TOUCHED>
		<SETG P-IT-OBJECT ,LANDING>
		<TELL CTHE ,LANDING "[RIDX: 4013]" ,CANT
		      "[RIDX: 4014]" CR>
		<RFALSE>)
	       (<NOT <IS? ,IN-MILL ,TOUCHED>> ; "[RIDX: 4015]"
		<QUEUE I-MILL -1>)>
	 <TELL CTHE ,MLADDER "[RIDX: 4016]" ,PCR>
	 <RETURN ,IN-MILL>>

<OBJECT IN-MILL
	(LOC ROOMS)
	(DESC "Windmill")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (OVERHEAD 0)
	(HEAR LANDING)
      ; (ODOR 0)
	(DOWN PER DOWN-MLADDER)
	(OUT PER DOWN-MLADDER)
	(GLOBAL MILL MLADDER RANCH GDESERT DTOWER DMOUNTS RESERVOIR)
	(SEE-ALL GDESERT)
	(SEE-W RANCH)
	(SEE-E DMOUNTS)
      ; (TDIR 0)
	(ACTION IN-MILL-F)>

<ROUTINE IN-MILL-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "You're on a square " D ,LANDING
"[RIDX: 4020]" D ,MILL ,PTHE
"[RIDX: 4021]" D ,MLADDER " leads downward." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE DOWN-MLADDER ()
	 <SAY-GROANS ,MLADDER>
	 <CRLF>
	 <RETURN ,UNDERM>>

<ROUTINE SAY-GROANS (OBJ)
	 <TELL CTHE .OBJ "[RIDX: 4023]" CR>
	 <RTRUE>>

<OBJECT SCIST
	(LOC ROOMS)
	(DESC "South of Reservoir")
	(FLAGS LIGHTED LOCATION DESERT)
	(OVERHEAD CISTAIR)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER ENTER-RESERVOIR)
	(UP PER ENTER-RESERVOIR)
	(NE TO UNDERM)
	(EAST TO D6A)
	(SE TO D6A)
	(SOUTH TO D6A)
	(SW TO D6A)
	(WEST TO SERANCH)
	(NW TO ERANCH)
	(GLOBAL RESERVOIR RANCH CISTAIR MILL MLADDER DTOWER GDESERT DMOUNTS)
      ; (TDIR 0)
	(SEE-N CISTAIR)
	(SEE-ALL GDESERT)
	(SEE-NW RANCH)
	(SEE-NE MILL)
	(ACTION SCIST-F)>

<ROUTINE SCIST-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 4026]" D ,RESERVOIR
"[RIDX: 4027]" D ,RANCH
"[RIDX: 4028]" D ,MILL ".|
|
A " D ,CISTAIR " climbs up to the " D ,RESERVOIR "'s edge." CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE ENTER-RESERVOIR ()
	 <TELL "You climb the " D ,CISTAIR ,PCR>
	 <RETURN ,ON-CIST>>

<OBJECT ON-CIST
	(LOC ROOMS)
	(DESC "Edge of Reservoir")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER INTO-RESERVOIR)
	(IN PER INTO-RESERVOIR)
	(DOWN PER DOWN-CISTAIR)
	(SOUTH PER DOWN-CISTAIR)
	(NE PER RES-FALL)
	(EAST PER RES-FALL)
	(SE PER RES-FALL)
	(SW PER RES-FALL)
	(WEST PER RES-FALL)
	(NW PER RES-FALL)
	(GLOBAL RESERVOIR CISTAIR RANCH GDESERT DTOWER DMOUNTS MILL)
      ; (TDIR 0)
	(SEE-W RANCH)
	(SEE-ALL GDESERT)
	(SEE-N RESERVOIR)
	(SEE-S CISTAIR)
	(ACTION ON-CIST-F)>

<ROUTINE ON-CIST-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL "[RIDX: 4035]" D ,RESERVOIR
"[RIDX: 4036]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE RES-FALL ()
	 <YOUD-FALL-OFF ,RESERVOIR>
	 <RFALSE>>

<ROUTINE INTO-RESERVOIR ("AUX" L)
	 <COND (<IN? ,CAGE ,PLAYER>
		<DO-DROWN>)>
	 <SET L <LOC ,WTK>>
	 <COND (<ZERO? .L>
		T)
	       (<OR <EQUAL? .L ,PLAYER>
		    <IN? .L ,PLAYER>>
		<MAKE ,WTK ,CHILLY>)>
	 <SET L <LOC ,BAG>>
	 <COND (<ZERO? .L>
		T)
	       (<OR <EQUAL? .L ,PLAYER>
		    <IN? .L ,PLAYER>>
		<MOVE ,SOGGY .L>
		<REMOVE ,BAG>
		<SETG APPETITE 0>
		<SETG CCNT 0>)>
	 <SET L <LOC ,EBAG>>
	 <COND (<ZERO? .L>
		T)
	       (<OR <EQUAL? .L ,PLAYER>
		    <IN? .L ,PLAYER>>
		<MOVE ,SOGGY .L>
		<REMOVE ,EBAG>)>
	 <ITALICIZE "Splash!">
	 <TELL CR CR>
	 <RETURN ,IN-CIST>>

<ROUTINE DOWN-CISTAIR ()
	 <TELL "You descend the " D ,CISTAIR ,PCR>
	 <RETURN ,SCIST>>

<OBJECT IN-CIST
	(LOC ROOMS)
	(DESC "Reservoir")
	(FLAGS LIGHTED LOCATION NOGRASS)
      ; (OVERHEAD 0)
      ; (HEAR 0)
      ; (ODOR 0)
	(NORTH PER ONLY-SOUTH)
	(NE PER ONLY-SOUTH)
	(EAST PER ONLY-SOUTH)
	(SE PER ONLY-SOUTH)
	(SOUTH PER EXIT-CIST)
	(UP PER EXIT-CIST)
	(OUT PER EXIT-CIST)
	(SW PER ONLY-SOUTH)
	(WEST PER ONLY-SOUTH)
	(NW PER ONLY-SOUTH)
	(DOWN PER IN-CIST-D)
	(IN PER IN-CIST-D)
	(GLOBAL RESERVOIR MILL)
	(SEE-ALL RESERVOIR)
	(ACTION IN-CIST-F)>

<ROUTINE ONLY-SOUTH ()
	 <TELL "The only way out is" ,TOS ,PERIOD>
	 <RFALSE>>

<ROUTINE IN-CIST-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 4043]" D ,RESERVOIR
"[RIDX: 4044]" CR>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE EXIT-CIST ()
	 <TELL "[RIDX: 4045]" D ,RESERVOIR ,PCR>
	 <RETURN ,ON-CIST>>

<ROUTINE IN-CIST-D ()
	 <COND (<ZERO? ,BREATH-HELD?>
		<SETG BREATH-HELD? 4>
		<QUEUE I-HOLD-BREATH -1>
		<TELL "[holding " D ,BREATH " first" ,BRACKET>)>
	 <TELL "You sink below the " D ,CSURFACE>
	 <TELL ,PCR>
	 <COND (<IN? ,CAGE ,PLAYER>
		<DO-DROWN>)>
	 <RETURN ,UNDER-WATER>>

<OBJECT UNDER-WATER
	(LOC ROOMS)
	(DESC "Underwater")
	(FLAGS LOCATION INDOORS NOGRASS)
	(OVERHEAD CSURFACE)
      ; (ODOR 0)
      ; (HEAR 0)
	(NORTH SORRY "[RIDX: 4050]")
	(NE SORRY "[RIDX: 4050]")
	(EAST SORRY "[RIDX: 4050]")
	(SE SORRY "[RIDX: 4050]")
	(SOUTH SORRY "[RIDX: 4050]")
	(SW SORRY "[RIDX: 4050]")
	(WEST SORRY "[RIDX: 4050]")
	(NW SORRY "[RIDX: 4050]")
	(UP PER RISE-TO-SURFACE)
	(OUT PER RISE-TO-SURFACE)
	(DOWN SORRY "[RIDX: 4058]")
	(GLOBAL RESERVOIR)
	(SEE-ALL RESERVOIR)
	(ACTION UNDER-WATER-F)>

<ROUTINE UNDER-WATER-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<TELL
"[RIDX: 4060]" D ,LAMP
"[RIDX: 4061]" CR>
		<RTRUE>)
	       (<AND <EQUAL? .CONTEXT ,M-BEG>
		     <VERB? SMELL INHALE EXHALE DRINK EAT TASTE SUCK>>
		<NOT-RECOMMENDED>
		<RTRUE>)
	       (T
		<RFALSE>)>>

<ROUTINE RISE-TO-SURFACE ()
	 <COND (<T? ,BREATH-HELD?>
		<SETG BREATH-HELD? 0>
		<DEQUEUE I-HOLD-BREATH>)>
	 <TELL "You rise to the " D ,CSURFACE ", gasping for air" ,PCR>
	 <RETURN ,IN-CIST>>

<ROUTINE JIGS-UP ()
	 <CARRIAGE-RETURNS>
	 <SETG IN-DORY? <>>
	 <SETG HERE ,DEATH>
	 <MOVE ,PLAYER ,HERE>
	 <SETG LIT? T>
	 <SETG VERBOSITY 1>
	 <DISPLAY-PLACE>
	 <V-LOOK>
	 <FINISH>>

<OBJECT DEATH
	(LOC ROOMS)
	(DESC "The River")
	(FLAGS LIGHTED LOCATION)
	(ACTION DEATH-F)>

<ROUTINE DEATH-F ("OPTIONAL" (CONTEXT <>))
	 <COND (<EQUAL? .CONTEXT ,M-LOOK>
		<DESCRIBE-DOCKSIDE>
		<DORY-APPEARS>
		<MAKE-OUT-CHARON>
		<CRLF>
		<SOUNDLESS-LANDING>
		<TELL
"[RIDX: 4066]">
		<COND (<GOT? ,BCOIN>
		       <TELL "your " D ,BCOIN>)
		      (T
		       <TELL "a " D ,BCOIN "[RIDX: 4069]">)>
		<TELL
"[RIDX: 4070]"
D ,OPSHORE ,PERIOD>
		<RTRUE>)>
	 <RFALSE>>

<ROUTINE FINISH ("AUX" X)
	 <CRLF>
	 <V-SCORE>
	 <TELL CR
"[RIDX: 4072]" CR CR>
	 <REPEAT ()
		 <TELL "[RIDX: 4073]">
	 	 <READ ,P-INBUF ,P-LEXV>
	 	 <SET X <GET ,P-LEXV 1>>
	 	 <COND (<EQUAL? .X ,W?RESTART>
			<SET X <RESTART>>
			<FAILED "RESTART">)
	       	       (<EQUAL? .X ,W?RESTORE>
			<SET X <RESTORE>>
			<FAILED "RESTORE">)
	       	       (<EQUAL? .X ,W?Q ,W?QUIT>
			<CRLF>
			<QUIT>)>>>

<CONSTANT BYRNE 0>
<CONSTANT THOREAU 1>
<CONSTANT POPE 2>
<CONSTANT CARROLL 3>
<CONSTANT CLARKE 4>
<CONSTANT PDL 5>
<CONSTANT HAWTHORNE 6>
<CONSTANT MELVILLE 7>
<CONSTANT EMERSON 8>
<CONSTANT MATTHEW 9>
<CONSTANT RIMBAUD 10>
<CONSTANT EMILY 11>
<CONSTANT WHITMAN 12>

<GLOBAL QUOTES:TABLE
	<PTABLE
	 <PLTABLE 24
		  "[RIDX: 4076]"
	 	  "[RIDX: 4077]"
	 	  "[RIDX: 4078]"
	 	  "[RIDX: 4079]"
	 	  0
	 	  "[RIDX: 4080]">
	 <PLTABLE 44
		  "[RIDX: 4081]"
	 	  "[RIDX: 4082]"
	 	  0
	 	  "[RIDX: 4083]">
	 <PLTABLE 42
	 	  "[RIDX: 4084]"
	 	  "[RIDX: 4085]"
	 	  0
	 	  "[RIDX: 4086]">
	 <PLTABLE 42
	 	  "[RIDX: 4087]"
	 	  "[RIDX: 4088]"
		  "[RIDX: 4089]"
	 	  0
	 	  "[RIDX: 4090]"
	 	  "[RIDX: 4091]"
	 	  "[RIDX: 4092]"
	 	  0
	 	  "[RIDX: 4093]">
	 <PLTABLE 22
	 	  "Any sufficiently    "
	 	  "advanced technology "
	 	  "is indistinguishable"
	 	  "[RIDX: 4097]"
	 	  0
	 	  " -- Arthur C. Clarke">
	 <PLTABLE 22
		  " Any sufficiently   "
		  " arcane magic is    "
		  " indistinguishable  "
		  "[RIDX: 4102]"
		  0
		  " -- P. David Lebling">
	 <PLTABLE 40
		  "[RIDX: 4104]"
	 	  "[RIDX: 4105]"
	 	  "[RIDX: 4106]"
	 	  "[RIDX: 4107]"
	 	  0
	 	  "[RIDX: 4108]">
	 <PLTABLE 37
	 	  "[RIDX: 4109]"
	 	  "[RIDX: 4110]"
	 	  0
	 	  "[RIDX: 4111]">
	 <PLTABLE 44
	 	  "[RIDX: 4112]"
	 	  "[RIDX: 4113]"
	 	  "[RIDX: 4114]"
	 	  "[RIDX: 4115]"
	 	  0
	 	  "[RIDX: 4116]">
	 <PLTABLE 26
	  	  "[RIDX: 4117]"
		  "[RIDX: 4118]"
		  0
		  "[RIDX: 4119]">
	 <PLTABLE 20
	  	  "Il y a une horloge"
		  "qui ne sonne pas. "
		  0
		  " -- Arthur Rimbaud">
	 <PLTABLE 40
		  "[RIDX: 4123]"
		  "[RIDX: 4124]"
		  "[RIDX: 4125]"
		  "[RIDX: 4126]"
		  0
		  "[RIDX: 4127]">
	 <PLTABLE 54
		  "[RIDX: 4128]"
		  "[RIDX: 4129]"
		  "[RIDX: 4130]"
		  0
		  "[RIDX: 4131]">>>
